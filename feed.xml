<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://allican.be/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="http://allican.be/feed.xml" rel="self" type="application/atom+xml" /><link href="http://allican.be/" rel="alternate" type="text/html" /><updated>2016-11-01T17:19:14+08:00</updated><id>http://allican.be/</id><title type="html">All I can be - A weblog by Dolf Andringa</title><subtitle>This site is my personal showcase and outlet about what keeps me off the streets. It will mostly be about hacking, programming, GNU/Linux, but also about ecology, travel and science. I am a weird combination of an ecologist, hacker and ideologist.
</subtitle><entry><title type="html">NRF24L01 and SPIDEV on the Beagle Bone Black</title><link href="http://allican.be/blog/2016/11/01/nrf24l01-beaglebone-black.html" rel="alternate" type="text/html" title="NRF24L01 and SPIDEV on the Beagle Bone Black" /><published>2016-11-01T00:00:00+08:00</published><updated>2016-11-01T16:31:50+08:00</updated><id>http://allican.be/blog/2016/11/01/nrf24l01-beaglebone-black</id><content type="html" xml:base="http://allican.be/blog/2016/11/01/nrf24l01-beaglebone-black.html">&lt;p&gt;I am working on various electronics projects where I want to have a sensor node that collects data from a sensor and either logs it to a micro-SD-card directly or sens it wirelessly to another machine that uses/logs/etc the data. I opted for a set of &lt;a href=&quot;http://www.nordicsemi.com/eng/Products/2.4GHz-RF/nRF24L01&quot;&gt;NRF24L01+&lt;/a&gt; boards for the wireless communication between the nodes and data loggers. So to test it out I want to communicate between my &lt;a href=&quot;http://www.nordicsemi.com/eng/Products/2.4GHz-RF/nRF24L01&quot;&gt;Beagle Bone Black&lt;/a&gt; and an &lt;a href=&quot;https://www.arduino.cc/&quot;&gt;Arduino&lt;/a&gt;. The &lt;a href=&quot;https://www.arduino.cc/&quot;&gt;NRF24 library by TMRh20&lt;/a&gt; supplies a unified API for the NRF24L01 that should work on Arduino, linux (like Beagle Bone Black and Raspberry Pi) and other platforms. It also includes some examples that are identical across platforms so you can test between platforms with the same code. Really cool. I had trouble getting it to work on my Beagle Bone Black. This post hopefully will help other getting it to work on a Beagle Bone Black running Debian Jessy.&lt;/p&gt;

&lt;p&gt;I basically followed two howto’s, the one on [https://tmrh20.github.io/RF24/Linux.html] and the one on [https://electron14.com/?p=404]. The latter of the two uses another library, and I want to use the TMRh20 to keep things uniform across platforms if possible, but still it was of help. The wire connections on that page are correct. And the TMRh20 library also installed fine if I followed that how-to. But as soon as I started the “gettingstarted” example from there, I got the error&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;RF24/examples/GettingStarted/
can&lt;span class=&quot;s1&quot;&gt;'t open device: No such file or directory
Aborted&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It took me quite a while to figure out what was going wrong.&lt;/p&gt;

&lt;p&gt;The NRF24L01 uses the SPI bus for communication. The Beagle Bone Black uses SPIDEV for this and has two SPI buses. Those need to be enabled, and for them (or I believe actually only 1 of the 2) to work, the HDMI bus needs to be disabled. What I had to do was first edit &lt;code class=&quot;highlighter-rouge&quot;&gt;/bootuEnv.txt&lt;/code&gt; and make sure the following two lines were in there:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;cape_disable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bone_capemgr.disable_partno&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;BB-BONELT-HDMI,BB-BONELT-HDMIN
&lt;span class=&quot;nv&quot;&gt;cape_enable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bone_capemgr.enable_partno&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;BB-SPIDEV0,BB-SPIDEV1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After that you need to restart your beaglebone. With&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ls /dev/spi&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
/dev/spidev1.0  /dev/spidev1.1  /dev/spidev2.0  /dev/spidev2.1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;you can see the devices are there.
You can also see they are available with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# cat /sys/devices/platform/bone_capemgr/slots &lt;/span&gt;
0: PF----  -1 
1: PF----  -1 
2: PF----  -1 
3: PF----  -1 
4: P-O-L-   0 Override Board Name,00A0,Override Manuf,BB-SPIDEV0
5: P-O-L-   1 Override Board Name,00A0,Override Manuf,BB-SPIDEV1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For me still I couldn’t get the library to work though. Turns out it is because of differences in the arguments between Linux and Arduino. With Arduino you give the radio() function the pin numbers of pins the CE and CSN pings of the board are connected to. With the BeagleBone BLack and SPIDEV the first argument is the pin number of the CE pin, while the second argument is the number of the SPI device that it is connected to. If you connected it as on the electron14.com tutorial, the CE pin is connected to pin GPIO_125 (pin 27 of header P9) and you’re using SPI1.0. 
In order to specify these pins in the gettingstarted example, you need to make sure there is only one line in &lt;em&gt;~/rf24libs/RF24/examples_linux/gettingstarted.cpp&lt;/em&gt; which instantiates the RF24 radio with the correct numbers:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;RF24&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;125&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;THe first argument specifies the CE pin is GPIO_125 while the second says that it uses SPI1.0, or in other words &lt;em&gt;/dev/spidev1.0&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After that you need to run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;make gettingstarted&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;in the &lt;em&gt;~/rf24libs/RF24/examples_linux&lt;/em&gt; directory to compile it.
After that, the example works:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# ./gettingstarted &lt;/span&gt;
RF24/examples/GettingStarted/
STATUS       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0xff &lt;span class=&quot;nv&quot;&gt;RX_DR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;TX_DS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;MAX_RT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;RX_P_NO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;7 &lt;span class=&quot;nv&quot;&gt;TX_FULL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
RX_ADDR_P0-1     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0xffffffffff 0xffffffffff
RX_ADDR_P2-5     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0xff 0xff 0xff 0xff
TX_ADDR      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0xffffffffff
RX_PW_P0-6   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0xff 0xff 0xff 0xff 0xff 0xff
EN_AA        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0xff
EN_RXADDR    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0xff
RF_CH        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0xff
RF_SETUP     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0xff
CONFIG       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0xff
DYNPD/FEATURE    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0xff 0xff
Data Rate    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1MBPS
Model        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; nRF24L01
CRC Length   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 16 bits
PA Power     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PA_MAX

 &lt;span class=&quot;k&quot;&gt;************&lt;/span&gt; Role Setup &lt;span class=&quot;k&quot;&gt;***********&lt;/span&gt;
 Choose a role: Enter 0 &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;pong_back, 1 &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;ping_out &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;CTRL+C to &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 &amp;gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><category term="blog" /><category term="wireless" /><category term="sensor_node" /><category term="beaglebone" /><category term="nrf24l01" /><category term="linux" /><category term="electronics" /><summary type="html">I am working on various electronics projects where I want to have a sensor node that collects data from a sensor and either logs it to a micro-SD-card directly or sens it wirelessly to another machine that uses/logs/etc the data. I opted for a set of NRF24L01+ boards for the wireless communication between the nodes and data loggers. So to test it out I want to communicate between my Beagle Bone Black and an Arduino. The NRF24 library by TMRh20 supplies a unified API for the NRF24L01 that should work on Arduino, linux (like Beagle Bone Black and Raspberry Pi) and other platforms. It also includes some examples that are identical across platforms so you can test between platforms with the same code. Really cool. I had trouble getting it to work on my Beagle Bone Black. This post hopefully will help other getting it to work on a Beagle Bone Black running Debian Jessy.</summary></entry><entry><title type="html">Business intelligence and data manipulation with Knime</title><link href="http://allican.be/blog/2016/10/26/business-intelligence-with-knime.html" rel="alternate" type="text/html" title="Business intelligence and data manipulation with Knime" /><published>2016-10-26T00:00:00+08:00</published><updated>2016-10-26T17:58:19+08:00</updated><id>http://allican.be/blog/2016/10/26/business-intelligence-with-knime</id><content type="html" xml:base="http://allican.be/blog/2016/10/26/business-intelligence-with-knime.html">&lt;p&gt;It’s been a while since I did a proper post about something techy. But I did spend quite a bit of time with Knime, and I love it. So I think it warrants a post. &lt;a href=&quot;https://www.knime.org/knime-analytics-platform&quot;&gt;Knime&lt;/a&gt; is a complete data mining, manipulation and analysis toolkit. It’s completely open-source and really flexible. I have experience with other &lt;a href=&quot;https://en.wikipedia.org/wiki/Extract,_transform,_load&quot;&gt;ETL&lt;/a&gt; and reporting tools, like &lt;a href=&quot;https://www.talend.com/products/talend-open-studio&quot;&gt;Talend Open Studio&lt;/a&gt;, &lt;a href=&quot;http://community.jaspersoft.com/project/jaspersoft-studio&quot;&gt;JasperReports&lt;/a&gt; and &lt;a href=&quot;http://www.pentaho.com/product/data-integration&quot;&gt;Pentaho Kettle&lt;/a&gt; but for me (in my use-case) Knime rises above them. Talking about my use case, what is it?&lt;/p&gt;

&lt;h2 id=&quot;use-case&quot;&gt;Use Case&lt;/h2&gt;
&lt;p&gt;At &lt;a href=&quot;http://www.east-corp-philippines.com&quot;&gt;the solar power company&lt;/a&gt; that I am a partner in (among other activities) we sell inverters from various different brands. As a consequence, our clients use a variety of (web-based) monitoring tools. Each with their own dashboard and output. But we need overviews comparing all our clients with each-other, and besides that, we can get extra data from those inverters internally, which allows us to do advanced debugging and monitoring. But visualising that data from those different sources is non-trivial. This is where Knime comes in. We can download exports of the webbased monitoring dashboards that our clients use. Some of them produce csv files, others excel files, and the format of all those files is wildly different. Knime allows me to read in the data from those different files, combine it into one common dataset and then analyse that data. I used it for instance to create an interactive graph that plots the average daily solar array output per week for each of our clients (as a % of their maximum output) so I could compare the performance of each solar array.
Knime does it’s work this by creating a chain of “nodes” (operations) that are connected by arrows. Each node does somethings small, like calculate a number, filter rows, rename columns, etc. The data flows through the chain of operations from the start node to the end node.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;/images/knime_workflow.png&quot; alt=&quot;My knime workflow combining data from multiple sources into one workflow for analysis and visualisation.&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the nodes you can do calculations, filtering, joining data, grouping, pivot tables, transposing, etc. It also has graphing tools, and an enormous amount of plugins that let you go into seriously complex modelling, genetics, bioinformatics, geo-information, etc. It allows you to read a whole directory of files, databases, allows you to download data/files automatically from the internet or webservices and interface with online API’s like google analytics and twitter. Most of this stuff I haven’t tried out though.&lt;/p&gt;

&lt;p&gt;In the left of the image above you see a bunch of nodes with no input. Those are meta nodes. These allow you to embed whole separate workflow into another workflow. For each client for instance I have a workflow that reads the respective export files, combines them and transforms the data into data that is uniform across all clients. This way you can break complex workflows up into several separate ones. And if I ever need to read the data from one of those clients in another workflow, I just copy the meta-node over to the new workflow without having to redo any work.&lt;/p&gt;

&lt;h2 id=&quot;scripting&quot;&gt;Scripting&lt;/h2&gt;
&lt;p&gt;For me the cool part is that it also has a lot of scripting plugins for different languages. It integrates javascript, Groovy, Java, Python and R scripting interfaces at least. So you can create a small node that does something in python, or leverage the serious statistical power of R.
I for instance use the python scripting node to Date/Time manipulations and some other data corrections that I can quickly do in Python. But those nodes are really tiny and easy to maintain.&lt;/p&gt;

&lt;p&gt;A larger python node that I created is for visualisation. Knime has quite a few graphing tools, from &lt;a href=&quot;http://marcoghislanzoni.com/blog/2016/04/29/knime-3-charting-with-plotly-js/&quot;&gt;javascript based ones which can use some awesome graphing libraries for webapplications like Plotly.js&lt;/a&gt;, to it’s own internal graphing tool. But none of those were good enough for me. The performance of the javascript based ones was bad with large amounts of data (one of my workflows has a few 100.000 rows) while the internal one wasn’t interactive enough. I decided to go with Python’s &lt;a href=&quot;http://matplotlib.org/&quot;&gt;matplotlib&lt;/a&gt; which is used a lot in the scientific community as is really good. Especially the &lt;a href=&quot;http://matplotlib.org/users/pyplot_tutorial.html&quot;&gt;Pyplot graphs&lt;/a&gt;, which have an interactive interface are nice to use, enabling you to zoom in and out, switch data series on and off and save the resulting final graph as a png file.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;/images/knime-matplotlib-graph.png&quot; alt=&quot;The resulting graph of using matplotlib in a Knime Python View node&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The below code does the matplotlib work. The code is commented and together with the &lt;a href=&quot;http://matplotlib.org/users/pyplot_tutorial.html&quot;&gt;pyplot docs&lt;/a&gt; is quite understandable.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.gridspec&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gridspec&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mpl&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#set the matplotlib style, based on ggplot but slightly adjusted&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mystyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ggplot'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mystyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lines.linewidth'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.6&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mystyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#create a gridspec where the graph will take up 5/6 of the grid&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#and the legend the last bit&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gridspec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GridSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;% &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;of maximum output'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Time'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Average daily output (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;% &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;of max) per week&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Date'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# a-axis&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# variables for the y-axes (data series)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;line_cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Date'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Week'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# use viridis for coloring the data series&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_color_cycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viridis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;#plot the data series&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#setup the legendto the right of the plot&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;leg1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'center left'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bbox_to_anchor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ncol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Now some magic to allow clicking in the legend to switch data series on and off&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lined&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;legline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origline&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leg1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;legline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origline&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onpick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# on the pick event, find the orig line corresponding to the&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# legend proxy line, and toggle the visibility&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;legline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artist&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;origline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;origline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Change the alpha on the line in the legend so we can see what lines&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# have been toggled&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;legline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;legline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#rescale the y-axis according to the currently active data series&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
    &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpl_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'pick_event'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onpick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;output_image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Knime is really an end-to-end tool for people who need to work with homogenous data and load, transform and correct them before visualising and analysing the data. Although there is a bit of a learning curve to use Knime, it’s quite user friendly and anyone (without programming experience) will be able to learn to use it. The additional Python and R scripting possibilities and host of plugins take it beyond a simple ETL tool to a proper business intelligence and data analysis suite.&lt;/p&gt;</content><category term="blog" /><category term="business_intelligence" /><category term="knime" /><category term="python" /><category term="matplotlib" /><category term="visualisation" /><category term="ETL" /><category term="data" /><summary type="html">It’s been a while since I did a proper post about something techy. But I did spend quite a bit of time with Knime, and I love it. So I think it warrants a post. Knime is a complete data mining, manipulation and analysis toolkit. It’s completely open-source and really flexible. I have experience with other ETL and reporting tools, like Talend Open Studio, JasperReports and Pentaho Kettle but for me (in my use-case) Knime rises above them. Talking about my use case, what is it?</summary></entry><entry><title type="html">Tragedy in the Amazon</title><link href="http://allican.be/blog/2016/09/13/tragedy-in-the-amazon.html" rel="alternate" type="text/html" title="Tragedy in the Amazon" /><published>2016-09-13T00:00:00+08:00</published><updated>2016-09-13T13:24:52+08:00</updated><id>http://allican.be/blog/2016/09/13/tragedy-in-the-amazon</id><content type="html" xml:base="http://allican.be/blog/2016/09/13/tragedy-in-the-amazon.html">&lt;p&gt;&lt;a href=&quot;https://www.change.org/p/president-of-bolivia-evo-morales-let-s-protect-the-madidi-national-park-and-amazon-forest?recruiter=596205683&quot;&gt;&lt;img src=&quot;/images/beni_dam_banner.jpg&quot; alt=&quot;Help save Madidi and Pilón Lajas&quot; /&gt;&lt;/a&gt;
The Tambopata-Madidi area on the foothills of the Andes is one if the last areas of Amazonian forest that is relatively untouched by man. It contains 42000km2 of national parks, ranging from Tambopata in Peru to Madidi and Pilón Lajas in Bolivia. It is home to two important tributaries of the Amazon river and an incredible biodiversity with both montane and lowland tropical forest, harbouring over 10% of the world’s bird species, and possibly the most biodiverse place in the world. Around 15000-30000 people divided among three different indigenous peoples call it their home, with an interesting cultural diversity, bridging the Highland people for which Peru and Bolivia are famous to the lowland Amazonian tribes.&lt;/p&gt;

&lt;p&gt;As a gateway to this biological and cultural diversity, Rurrenabaque in Bolivia has attracted many visitors from all over the world for many years and has been a thriving eco-tourism destination with around 30000 tourists visiting the area in 2005 alone.
Now, all this is threatened in the name of “progress”. A badly planned bridge over the Rio Beni followed by a large road through the park and other short-sighted economical developments have already had a negative impact on the tourism in the area, but now president Evo Morales is planing to build two hydroelectric dams in the river Beni, two giant artificial lakes which will inundate around 2000km2, including substantial parts of the Madidi and Pilón Lajas national parks. But besides inundating primary forest and killing an enormous diversity of flora and fauna, giant dams like this have much wider ranging ecological impacts. The dams, cutting off one of the muddiest tributaries to the Amazon, will also prevent nutrients and minerals to be transported downstream, not only causing large ecological impacts on the remaining forests in Brazil but also causing eutrophication of the lake with bad water quality, low biodiversity and a breeding ground for parasites as consequences. The dams further downstream in Brazil have also proven to Bolivia that these mega dams elevate the risk of flooding upstream caused by el niño/la niña and influence migratory behaviour of fish along the whole Amazon River. And of course such a massive deforestation will have an impact on both the local climate and will be another nail in the coffin of human induced climate change.&lt;/p&gt;

&lt;p&gt;Also from an economical standpoint these lakes are questionable. The electricity is generated purely to sell to Brazil. Their places with high demand are on the other side of Bolivia, incurring high transportation costs. And a market with only one buyer for your product allows the buyer to push the price down. This has happened before in Paraguay where Brazil buys electricity from a giant hydroelectric dam below cost price. The returns on investment are therefore very likely much worse than projected by the government. For this reason a number hydroelectric projects in neighbouring countries have been canceled.
And even when accepting the expected income, looking at the sheer size of the lake (which multiple examples have shown is usually grossly underestimated initially) in comparison with the projected income from the electricity, it is a bad use of the surface area. Besides there being viable smaller scale hydroelectric alternatives, many alternative low-cost and sustainable sources of income have already been realised and can be expanded upon. The thriving eco-tourism in the area and the examples of sustainable agriculture projects are just two examples. The lakes will irreversibly destroy the eco-tourism and agricultural activities. With Rurrenabaque being one of the two major tourism destinations in Bolivia, the economical consequences will be wide ranging and not only limited to Rurrenabaque.&lt;/p&gt;

&lt;p&gt;Another tragedy is the cultural impact. Multiple indigenous people (Tsimane, Mosetén and Tacana), some of which still live in isolation in their traditional culture by choice, will loose their territory, livelihood and homes. This is not only a tragedy but even illegal under Bolivian law, where indigenous tribes have a high level of autonomy over their territory. Due to the geology of the land, the indigenous people live in sparsely populated but relatively small areas. A relocation will force a complete people to live in exile and quickly loose their culture.&lt;/p&gt;

&lt;p&gt;These cultural, ecological and economical tragedies can and should be prevented. Foreigners can’t do much to convince the president of Bolivia, but I hope that with enough interest and attention abroad, enough Bolivian people will realise that this project is an all round bad idea and will listen to their countrymen and -women who are working hard and not without danger, to convince their politicians. If you want to help, &lt;a href=&quot;https://www.change.org/p/president-of-bolivia-evo-morales-let-s-protect-the-madidi-national-park-and-amazon-forest?recruiter=596205683&quot;&gt;please sign the petition&lt;/a&gt; and spread the word on Facebook or in any other way you can. A great group where many Bolivian people who want to stop the project are a member of &lt;a href=&quot;https://www.facebook.com/groups/280638448985438/&quot;&gt;can be found on Facebook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;https://bolivia.wcs.org/en-us/Landscapes/Madidi-Tambopata.aspx&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://drobisonbolivia.blogspot.com/2016/09/represas-en-el-bala-y-chepete-pura.html?spref=fb&amp;amp;m=1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;https://es.scribd.com/mobile/document/274405657/EL-BALA-LA-GRAN-DEVASTACION-EN-LA-AMAZONIA-BOLIVIANA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://porlatierra.org/novedades/post/127&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://www.lostiempos.com/tendencias/interesante/20160814/crisis-rurrenabaque-pesadilla-china&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://tur.sb-10.org/doc/6649/index.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://dice.missouri.edu/docs/south-america-other/Tacana.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://dice.missouri.edu/docs/south-america-other/Tacana_2.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://dice.missouri.edu/docs/south-america-other/Tsimane.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="blog" /><category term="Amazon" /><category term="Bolivia" /><category term="Conservation" /><category term="deforestation" /><category term="hydroelectric" /><category term="dam" /><summary type="html">The Tambopata-Madidi area on the foothills of the Andes is one if the last areas of Amazonian forest that is relatively untouched by man. It contains 42000km2 of national parks, ranging from Tambopata in Peru to Madidi and Pilón Lajas in Bolivia. It is home to two important tributaries of the Amazon river and an incredible biodiversity with both montane and lowland tropical forest, harbouring over 10% of the world’s bird species, and possibly the most biodiverse place in the world. Around 15000-30000 people divided among three different indigenous peoples call it their home, with an interesting cultural diversity, bridging the Highland people for which Peru and Bolivia are famous to the lowland Amazonian tribes.</summary></entry><entry><title type="html">My Beagle Bone Black Logic-level analyser in  a web-application</title><link href="http://allican.be/project/2016/06/28/beaglebone_logic_level_analyser.html" rel="alternate" type="text/html" title="My Beagle Bone Black Logic-level analyser in  a web-application" /><published>2016-06-28T00:00:00+08:00</published><updated>2016-06-28T14:39:10+08:00</updated><id>http://allican.be/project/2016/06/28/beaglebone_logic_level_analyser</id><content type="html" xml:base="http://allican.be/project/2016/06/28/beaglebone_logic_level_analyser.html">&lt;p&gt;For my &lt;a href=&quot;/tag/aquaponics/&quot;&gt;aquaponics project&lt;/a&gt; I need to create a timed switch that turns my pump on and off. I am doing this with a simple 555 timer in a-stable mode, a capacitor, a relais and two pot-meters. The timer in a-stable mode switches a pin between high and low state, for a fixed amount of time. Both the high and the low times can be adjusted with the potentiometers.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;/images/555timer_bbb.jpg&quot; alt=&quot;My 555-timer connected to the Beaglebone Black&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/bbb_logiclevel_analyser.png&quot; alt=&quot;The Beaglebone Black logic-level analyser web-application&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To test if my calculations were right though, I need to monitor the output pin state. I did this already with a small LED, but since the timing is quite long (my pump should be on for 2 minutes and off for 10), I was quite annoyed having to sit looking at an LED for a while and I missed the switching between high and low multiple times. Especially in the beginning it is annoying because the initial startup is twice the “on” state, so even 20 minutes. A lot of time to waste, that I’d rather waste by developing a nice web-application that monitors the pin state in a graph.&lt;/p&gt;

&lt;p&gt;And so my logic-level analyser was born. I have a &lt;a href=&quot;//beagleboard.org/black&quot;&gt;Beagle Bone Black&lt;/a&gt; lying around which is perfect for this. It has many digital input/output pins, an Analog-Digital Converter (ADC) and PWM output among other things. I have a wifi card plugged into it as well, so as soon as I switch it on, it joins my wifi. It also contains a node.js server an runs the Cloud9 IDE which allows for easy programming of it, and with the bonescript library makes the many features available in javascript. So what better way to create a logic level analyser by just wiring the output pin of my 555 timer circuit (on a breadboard) to one of the GPIO pins of my beaglebone and plot the state of the pin in a graph in a web-interface.&lt;/p&gt;

&lt;p&gt;I wanted to do more with AngularJS anyway and creating dashboards with it, so searching for a nice plotting library wasn’t wasted time anyway. I really like &lt;a href=&quot;//www.angularjs.org&quot;&gt;AngularJS&lt;/a&gt; the more I play with it, especially it’s way to separate the (interface) logic from the html and it’s ability to dynamically change the data for a “controller” and have it update the interface. Perfect for me where I want to continuously poll the pin state of my beaglebone and update the graph. It can even gracefully handle a lost connection for instance with a wifi hick-up.
The &lt;a href=&quot;//krispo.github.io/angular-nvd3/&quot;&gt;angular-nvd3 libary&lt;/a&gt; is the library that I chose for the graphs. The underlying graphing library is D3, which is quite powerful, but it includes a much easier/quicker to use JSON-based API, and integrates very well with AngularJS.
You can find the code, which is quite self-explanatory &lt;a href=&quot;//github.com/dolfandringa/bbb_logiclevel_analyser&quot;&gt;on github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just to note some of the more interesting points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Beaglebone Black runs node-js which supports web-sockets. It also provides the bonescript Javascript library that can either be used by node-js or run in the browser. In the latter case it connects to the Beaglebone Black through a websocket using socket.io (which needs to be present on the beaglebone in /socket.io/socket.io.js). This is what the &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.setupBoneScript&lt;/code&gt; function takes care off. The call to &lt;code class=&quot;highlighter-rouge&quot;&gt;setTargetAddress&lt;/code&gt; in there is from the bonescript library. As soon as the websocket connection is established, it calls &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.refresh&lt;/code&gt;, which polls the pin and updates the graph and starts a timeout to repeat itself continuously.&lt;/li&gt;
  &lt;li&gt;The configuration of the graph is done with the &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.options&lt;/code&gt; object which contains the configuration parameters for the graph.&lt;/li&gt;
  &lt;li&gt;The graph’s y-axis contains only the values on and off. Bonescript returns 1 and 0 for the pin state though. But the NVD3 graph allows you to change the values displayed on the y-Axis with the &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.options.chart.yAxis.tickFormat&lt;/code&gt; function. This just gets the y-axis value and should return the value that you want displayed on the y-axis.&lt;/li&gt;
  &lt;li&gt;With ```$scope.options.chart.yDomain: [0,1]`` I forced the y-Axis to only contain values from 0 (off) to 1 (on). Else it would also include -1 on the y-axis.&lt;/li&gt;
  &lt;li&gt;with &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.options.chart.yAxis.tickValues: [0,1]&lt;/code&gt; I made sure that there are only y-axis ticks for the values 0 (off) and 1 (on), and none in between.&lt;/li&gt;
&lt;/ul&gt;</content><category term="project" /><category term="electronics" /><category term="aquaponics" /><category term="web-application" /><category term="beaglebone" /><category term="angularjs" /><category term="d3" /><category term="development" /><summary type="html">For my aquaponics project I need to create a timed switch that turns my pump on and off. I am doing this with a simple 555 timer in a-stable mode, a capacitor, a relais and two pot-meters. The timer in a-stable mode switches a pin between high and low state, for a fixed amount of time. Both the high and the low times can be adjusted with the potentiometers.</summary></entry><entry><title type="html">Reinstalling the kernel on Arch Linux after a failed upgrade.</title><link href="http://allican.be/blog/2016/06/09/arch-reinstalling-kernel-after-failed-upgrade.html" rel="alternate" type="text/html" title="Reinstalling the kernel on Arch Linux after a failed upgrade." /><published>2016-06-09T00:00:00+08:00</published><updated>2016-06-09T11:47:11+08:00</updated><id>http://allican.be/blog/2016/06/09/arch-reinstalling-kernel-after-failed-upgrade</id><content type="html" xml:base="http://allican.be/blog/2016/06/09/arch-reinstalling-kernel-after-failed-upgrade.html">&lt;p&gt;Since a few weeks my laptop battery is dead. I am still trying to work with Asus to get a new one as it is still under warranty (but sending it in for repair will apparently take 2 months while I already know that a new battery will solve the problem). So I am working of the net power only. The power sockets in the Philippines aren’t great though, and Asus decided to integrate the plug into the transformer/regulator unit for my laptop charger, creating a big heavy plug that is really too heavy for vertical wall sockets. So as you can guess from the title of this blog post, yesterday I was working on my laptop and decided to install upgrades on my Arch Linux box. While I was doing this though, I accidentally touched the power cord of my laptop, which then fell out of the wall socket. This isn’t the first time this happened, but unfortunately my computer was in the middle of a kernel upgrade…. And of course the kernel modules weren’t fully installed, and the initramfs wasn’t fully updated either.&lt;/p&gt;

&lt;p&gt;So when I started my laptop again, it dropped me into the emergency mode. After looking at the logs with &lt;code class=&quot;highlighter-rouge&quot;&gt;journalctl -xe&lt;/code&gt; and going almost all the way to the top of the logs, I found these error messages:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;systemd[1]: Starting Load Kernel Modules...
systemd[1]: systemd-modules-load.service: Main process exited, &lt;span class=&quot;nv&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;exited, &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
systemd[1]: Failed to start Load Kernel Modules.
systemd[1]: systemd-modules-load.service: Unit entered failed state.
systemd[1]: systemd-modules-load.service: Failed with result &lt;span class=&quot;s1&quot;&gt;'exit-code'&lt;/span&gt;.
systemd-modules-load[173]: Failed to lookup &lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'loop'&lt;/span&gt;: Function not implemented
systemd-modules-load[173]: Failed to lookup &lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vboxdrv'&lt;/span&gt;: Function not implemented
systemd-modules-load[173]: Failed to lookup &lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vboxpci'&lt;/span&gt;: Function not implemented
systemd-modules-load[173]: Failed to lookup &lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vboxnetadp'&lt;/span&gt;: Function not implemented
systemd-modules-load[173]: Failed to lookup &lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vboxnetflt'&lt;/span&gt;: Function not implemented&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And a little further down:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;systemd[1]: Mounting /boot/efi...
mount[336]: mount: unknown filesystem &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vfat'&lt;/span&gt;
systemd[1]: boot-efi.mount: Mount process exited, &lt;span class=&quot;nv&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;exited &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;32
systemd[1]: Failed to mount /boot/efi.
systemd[1]: Dependency failed &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Local File Systems.
systemd[1]: &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;-fs.target: Job &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;-fs.target/start failed with result &lt;span class=&quot;s1&quot;&gt;'dependency'&lt;/span&gt;.
systemd[1]: &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;-fs.target: Triggering &lt;span class=&quot;nv&quot;&gt;OnFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; dependencies.
systemd[1]: boot-efi.mount: Unit entered failed state.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So there was clearly something wrong with my kernel modules, causing them not to load. Fortunately I still had my &lt;a href=&quot;/blog/2016/02/04/creating_custom_persistent_arch_live_iso.html&quot;&gt;custom persistent arch iso live USB stick&lt;/a&gt;. With this, the solution was quite easy:&lt;/p&gt;

&lt;p&gt;I booted my laptop from the usb stick. Once in the live cd, I &lt;a href=&quot;https://wiki.archlinux.org/index.php/netctl#Wireless_.28WPA-PSK.29&quot;&gt;setup the network with netctl&lt;/a&gt;. Once I had network, I mounted my the partition with my OS’s root filesystem with &lt;code class=&quot;highlighter-rouge&quot;&gt;mount /dev/sda8 /mnt&lt;/code&gt; and chrooted into it with &lt;code class=&quot;highlighter-rouge&quot;&gt;arch-chroot /mnt /bin/bash&lt;/code&gt;. Now I was back in my normal OS. All I had to do now was reinstall the kernel and modules. I did &lt;code class=&quot;highlighter-rouge&quot;&gt;pacman -S --force linux linux-headers mkinitcpio kmod&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;--force&lt;/code&gt; in there makes sure everything gets reinstalled even if files from the package already exist in the filesystem. With me this was necessary since the same kernel and modules were already partially installed. It also re-built the initramfs and installed it. After this was done and a reboot, my os was up and running again. Phew! Thank heavens for the live USB stick.&lt;/p&gt;

&lt;p&gt;The last thing I needed to do is check which other packages might need to be reinstalled. If you have yaourt installed, you can show your installed packages, sorted by installation date with &lt;code class=&quot;highlighter-rouge&quot;&gt;yaourt -Q --date&lt;/code&gt;. The packages at the bottom are the ones that were installed last. I just guessed from there which were the packages that might be corrupt, and reinstalled them the same way as the linux/linux-headers/etc pacakges. I also got an error when installing them about nvidia modules (I am running bumblebee and bbswitch was one of the likely incompletely installed packages) and therefore decided to reinstal all those packages (nvidia, nvidia-utils, bumblebee, opencl-nvidia, lib32-nvidia-utils, bbswitch) as well. After this all errors were gone.&lt;/p&gt;</content><category term="blog" /><category term="ArchLinux" /><category term="live" /><category term="kernel" /><category term="upgrade" /><category term="modules" /><summary type="html">Since a few weeks my laptop battery is dead. I am still trying to work with Asus to get a new one as it is still under warranty (but sending it in for repair will apparently take 2 months while I already know that a new battery will solve the problem). So I am working of the net power only. The power sockets in the Philippines aren’t great though, and Asus decided to integrate the plug into the transformer/regulator unit for my laptop charger, creating a big heavy plug that is really too heavy for vertical wall sockets. So as you can guess from the title of this blog post, yesterday I was working on my laptop and decided to install upgrades on my Arch Linux box. While I was doing this though, I accidentally touched the power cord of my laptop, which then fell out of the wall socket. This isn’t the first time this happened, but unfortunately my computer was in the middle of a kernel upgrade…. And of course the kernel modules weren’t fully installed, and the initramfs wasn’t fully updated either.</summary></entry><entry><title type="html">Setting up a chinese IP camera without manual</title><link href="http://allican.be/blog/2016/05/13/finding-chinese-ip-cam.html" rel="alternate" type="text/html" title="Setting up a chinese IP camera without manual" /><published>2016-05-13T00:00:00+08:00</published><updated>2016-05-13T21:21:11+08:00</updated><id>http://allican.be/blog/2016/05/13/finding-chinese-ip-cam</id><content type="html" xml:base="http://allican.be/blog/2016/05/13/finding-chinese-ip-cam.html">&lt;p&gt;This post is probably a no-brainer for quite a lot of people. And it should have been for me too. I don’t know if my brain was just not working from the dry and hot el niño weather, but it took me quite a while to figure this out. Since chances are there are others with the same problem, I thought it’d be worth to write it up.&lt;/p&gt;

&lt;p&gt;My boss bought a few IP-camera’s on Ali-Express together with a recorder to monitor some areas with expensive equipment. I won’t go into &lt;a href=&quot;https://www.youtube.com/watch?v=B8DjTcANBx0&quot;&gt;the security of these types of camera’s&lt;/a&gt; here. And of course the cheap stuff from Ali-Express comes in an unmarked box without any manuals. There’s also no brand to be found on the camera. Normally it is a matter of pride to not need manuals. But the problem with IP camera’s is that you need to know their network settings somehow. That is where I ran into trouble.&lt;/p&gt;

&lt;p&gt;The camera’s have both a wired and wireless connection available. I was hoping the camera would be set to dynamic IP, so it would pickup an IP address from the DHCP server on my router, and I could see it in the router status page when I connected it with a wire. No such luck though. The next thing I tried was setup a DHCP server on my laptop. It’s pretty straightforward to install dnsmasq, and the only settings you need to adjust are the interfaces directive (make sure it’s not running on your wifi interface and mess up the wifi) and DHCP-range directive. And you need to set a static IP in the same sub-net for your wired network card. I’m not going into the details for this, but suffice it to say this didn’t work either. So clearly the IP-camera wasn’t set for a dynamic IP. I tried a few of the simple IP addresses like 192.168.0.2 192.168.1.2, etc but none worked. I was ready to give up what my brain finally kicked into gear: &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;wireshark&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have used wireshark plenty of times before to analyse network traffic. It is an awesome tool. It allows you to see all network traffic passing through your network interfaces. I did see the light on the wired network interface of the camera blinking, so I knew it was trying to communicate through the network. So I connected the camera with a cable straight into the network card of my laptop. I ran wireshark on that network interface and looked at the traffic coming by. Very quickly I noticed &lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP-packets&lt;/a&gt; where an IP-address 192.168.1.136 was &lt;a href=&quot;https://ask.wireshark.org/questions/5412/what-does-arp-42-who-has-19216811-tell-192168133-mean&quot;&gt;asking who has&lt;/a&gt; 192.168.1.1. This means that there is a device with IP-address 192.168.1.136 who is looking to contact IP-address 192.168.1.1. Chances are that this is the camera looking for a router to contact the internet. Indeed the camera’s turned out to be configured with NTP enabled to sync it’s hardware clock with a server on the internet, and it was trying to get on the internet. 
So now I knew the IP-address of the camera was 192.168.1.136. From that point onward it was straightforward again. Just set a static IP (192.168.1.2) on my laptop wired network interface, have a cable between the camera and the laptop, and I could access the web-interface of the camera on http://192.168.1.136.&lt;/p&gt;

&lt;p&gt;Configuring could finally commence. It took me way to long to realize to get wireshark. It was pretty easy once I remembered.&lt;/p&gt;</content><category term="blog" /><category term="networking" /><category term="wireshark" /><category term="IP-camera" /><category term="IP-address" /><summary type="html">This post is probably a no-brainer for quite a lot of people. And it should have been for me too. I don’t know if my brain was just not working from the dry and hot el niño weather, but it took me quite a while to figure this out. Since chances are there are others with the same problem, I thought it’d be worth to write it up.</summary></entry><entry><title type="html">Gorgeous earth art</title><link href="http://allican.be/blog/2016/04/29/gorgeous-earth.html" rel="alternate" type="text/html" title="Gorgeous earth art" /><published>2016-04-29T00:00:00+08:00</published><updated>2016-05-02T14:56:16+08:00</updated><id>http://allican.be/blog/2016/04/29/gorgeous-earth</id><content type="html" xml:base="http://allican.be/blog/2016/04/29/gorgeous-earth.html">&lt;p&gt;The USGS isn’t just a scientific organisation doing a lot of satellite imagery and remote sensing work. They show themselves to be artists as well. These images are absolutely gorgeous. Earth itself is gorgeous and there are many ways of looking at it. The way the USGS Landsat team are looking at it is definitely way out there. The way I use the same images to try to look underwater is a bit more mundane unfortunately.
These are just some of the images. You can &lt;a href=&quot;http://eros.usgs.gov/imagegallery/earth-art-4&quot;&gt;see more on the USGS website&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;/images/earthasart1.png&quot; alt=&quot;The sand dunes of the Sahara in the &amp;quot;Land of Terror,&amp;quot; Tanezrouft Basin in Algeria. Landsat 8/USGS/NASA&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/earthasart4.jpg&quot; alt=&quot;&amp;quot;This enhanced image of Western Australia resembles a mixture of crayons that melted in the sun. The yellow sand dunes of the Great Sandy Desert cover the upper right portion of the image. Red splotches indicate burned areas from grass and forest fires, and the colors in the rest of the image depict different types of surface geology.&amp;quot; - USGS&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/earthasart6.png&quot; alt=&quot;&amp;quot;Geometric shapes lie across the emptiness of the Sahara Desert in southern Egypt. Each point is a center pivot irrigation field a little less than 1 kilometer (0.6 miles) across. With no surface water in this region, wells pump underground water to rotating sprinklers from the huge Nubian Sandstone aquifer, which lies underneath the desert.&amp;quot; - USGS&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/earthasart22.jpg&quot; alt=&quot;&amp;quot;The ice surrounding the northern Canadian Spicer Islands, shown in bright red, resembles a cell, complete with ribosomes, mitochondria, and a nucleus. Even though the image was captured shortly after the first day of summer in the Northern Hemisphere, the islands are locked in ice.&amp;quot; - USGS&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/earthasart3.jpg&quot; alt=&quot;&amp;quot;A nearly perfect circle of forest delineates the boundary of Egmont National Park in New Zealand. Snow-capped Mount Taranaki marks the center of the park, which is surrounded by green farmland.&amp;quot; - USGS&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/earthasart5.jpg&quot; alt=&quot;&amp;quot;Slessor Glacier in Antarctica flows between the angular promontory Parry Point on the top left of the image and the Shackleton Range on the lower right. The purple highlights are exposed ice. Strong winds blow away the snow cover and expose lines that indicate the glacier flow direction. Rock outcrops next to the glacier also exhibit some of this bare ice.&amp;quot; - USGS&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="blog" /><category term="landsat" /><category term="USGS" /><category term="art" /><category term="remote-sensing" /><summary type="html">The USGS isn’t just a scientific organisation doing a lot of satellite imagery and remote sensing work. They show themselves to be artists as well. These images are absolutely gorgeous. Earth itself is gorgeous and there are many ways of looking at it. The way the USGS Landsat team are looking at it is definitely way out there. The way I use the same images to try to look underwater is a bit more mundane unfortunately.
These are just some of the images. You can see more on the USGS website.</summary></entry><entry><title type="html">Aquaponics Modeler: a modeling application for Aquaponics systems.</title><link href="http://allican.be/project/2016/04/24/AquaponicsModeler.html" rel="alternate" type="text/html" title="Aquaponics Modeler: a modeling application for Aquaponics systems." /><published>2016-04-24T00:00:00+08:00</published><updated>2016-06-28T15:10:11+08:00</updated><id>http://allican.be/project/2016/04/24/AquaponicsModeler</id><content type="html" xml:base="http://allican.be/project/2016/04/24/AquaponicsModeler.html">&lt;p&gt;Little by little I am working at my current job on an &lt;a href=&quot;http://www.theaquaponicsource.com/what-is-aquaponics/&quot;&gt;Aquaponics system&lt;/a&gt; together with the help of our volunteers.
As a final step to the first implementation I need to regulate the flow of water from our fish tank to the grow bed. I decided to do this with a timer that switches the pump on and off. In order to create the electronics for this timer, I need to know accurately how much water is flowing from one compartment into the next.
Of course I could just have done the maths for this on the back of a napkin, but I though writing an application that does the simulation would be much more fun.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;/images/aquaponics_modeler_2.png&quot; alt=&quot;Aquaponics Modeler Screenshot&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/aquaponics_modeler_1.png&quot; alt=&quot;Aquaponics Modeler Screenshot&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And as it turns out, one thing leads to another, and before you know it you have a complete desktop application with &lt;a href=&quot;http://allican.be/AquaponicsModeler/&quot;&gt;proper documentation&lt;/a&gt; that can be used by anyone. It was fun to do and is helping me create our own aquaponics setup. I don’t know if it is of any use to anyone else, but for anyone interested, the documentation can be found &lt;a href=&quot;http://allican.be/AquaponicsModeler/&quot;&gt;on my website&lt;/a&gt; and the code on &lt;a href=&quot;http://www.github.com/dolfandringa/AquaponicsModeler/&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The application is written using the &lt;a href=&quot;http://doc.qt.io/qt-5/&quot;&gt;Qt application framework&lt;/a&gt;, making use of &lt;a href=&quot;https://www.riverbankcomputing.com/software/pyqt/intro&quot;&gt;PyQt5&lt;/a&gt;. The plots are being generated my the &lt;a href=&quot;http://matplotlib.org/users/pyplot_tutorial.html&quot;&gt;matplotlib.pyplot&lt;/a&gt; library. The documentation has been created using &lt;a href=&quot;http://www.sphinx-doc.org/&quot;&gt;Sphinx&lt;/a&gt; with the autodoc, apidoc and &lt;a href=&quot;http://sphinxcontrib-napoleon.readthedocs.org/en/latest/&quot;&gt;napoleon&lt;/a&gt; extensions. This allows me to write the documentation in docstrings using the Google syntax and generate the corresponding html files automatically. Codeanchaos wrote &lt;a href=&quot;https://codeandchaos.wordpress.com/2012/07/30/sphinx-autodoc-tutorial-for-dummies/&quot;&gt;a great howto on sphinx, apidoc and autodoc&lt;/a&gt;.&lt;/p&gt;</content><category term="project" /><category term="python" /><category term="qt" /><category term="desktop-application" /><category term="aquaponics" /><category term="modeling" /><category term="documentation" /><category term="sphinx" /><summary type="html">Little by little I am working at my current job on an Aquaponics system together with the help of our volunteers.
As a final step to the first implementation I need to regulate the flow of water from our fish tank to the grow bed. I decided to do this with a timer that switches the pump on and off. In order to create the electronics for this timer, I need to know accurately how much water is flowing from one compartment into the next.
Of course I could just have done the maths for this on the back of a napkin, but I though writing an application that does the simulation would be much more fun.</summary></entry><entry><title type="html">Problems getting MPD, PulseAudio and Arch Linux to work together</title><link href="http://allican.be/blog/2016/02/20/pulseaudio-mpd-archlinux.html" rel="alternate" type="text/html" title="Problems getting MPD, PulseAudio and Arch Linux to work together" /><published>2016-02-20T00:00:00+08:00</published><updated>2016-02-20T11:29:35+08:00</updated><id>http://allican.be/blog/2016/02/20/pulseaudio-mpd-archlinux</id><content type="html" xml:base="http://allican.be/blog/2016/02/20/pulseaudio-mpd-archlinux.html">&lt;p&gt;I love Gnome Music Player Client (gmpc) as an audio player, with MPD (Music Player Daemon) as a backend. Both because of the remote control possibilities but GMPC is also just a great client. But when installing MPD, combined with PulseAudio on my Arch Linux laptop, I ran into trouble. MPD runs as a different user, and as that user wasn’t able to connect to PulseAudio that runs under my regular desktop user.&lt;/p&gt;

&lt;p&gt;It turns out that you can run PulseAudio in a few different ways, but on my Mate desktop in Arch Linux, PulseAudio is started with my desktop session when I login. The audio programs I run on my desktop connect to this PulseAudio session and work fine. The MPD daemon runs as a different user and can’t connect to the PulseAudio session running as my desktop user. The trick is to spawn a PulseAudio session for each user individually. &lt;a href=&quot;http://mpd.wikia.com/wiki/PulseAudio&quot;&gt;According to the MPD wiki&lt;/a&gt; most distributions have pulse audio setup to auto-spawn a PulseAudio session for each user. On my Arch Linux box that wasn’t the case though. This resulted in the following error messages:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pulse_output: Failed to &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;PulseAudio Analog Out&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pulse]: pa_context_connect&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; has failed: Connection refused
output: Failed to open audio output
pulse_output: Failed to open &lt;span class=&quot;s2&quot;&gt;&quot;PulseAudio Analog Out&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;pulse]: failed to connect: Access denied&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The solution is to edit /etc/pulse/client.conf and set &lt;code class=&quot;highlighter-rouge&quot;&gt;autospawn = yes&lt;/code&gt; and make sure the line is not commented with a &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; at the beginning.
After this, restart mpd and pulseaudio should work. To check you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;ps auwx|grep pulse&lt;/code&gt;. It should show output similar to the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;lt;myuser&amp;gt; &lt;/span&gt;11378  0.0  0.1 497404 11512 ?        S&amp;lt;sl 08:06   0:00 /usr/bin/pulseaudio --daemonize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no
mpd      11513  0.3  0.1 563304 12604 ?        Sl   08:14   0:04 /usr/bin/pulseaudio --start --log-target&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;syslog&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You see a pulseaudio session for your own user and one for the mpd user. If this is the case, you should be able to play music with MPD to pulseaudio.&lt;/p&gt;</content><category term="blog" /><category term="ArchLinux" /><category term="MPD" /><category term="PulseAudio" /><summary type="html">I love Gnome Music Player Client (gmpc) as an audio player, with MPD (Music Player Daemon) as a backend. Both because of the remote control possibilities but GMPC is also just a great client. But when installing MPD, combined with PulseAudio on my Arch Linux laptop, I ran into trouble. MPD runs as a different user, and as that user wasn’t able to connect to PulseAudio that runs under my regular desktop user.</summary></entry><entry><title type="html">Outputting HTML or PDF results in a loop with R, RMarkdown and Knitr</title><link href="http://allican.be/blog/2016/02/07/rmarkdown_loops_and_knitr.html" rel="alternate" type="text/html" title="Outputting HTML or PDF results in a loop with R, RMarkdown and Knitr" /><published>2016-02-07T00:00:00+08:00</published><updated>2016-02-09T13:48:27+08:00</updated><id>http://allican.be/blog/2016/02/07/rmarkdown_loops_and_knitr</id><content type="html" xml:base="http://allican.be/blog/2016/02/07/rmarkdown_loops_and_knitr.html">&lt;p&gt;Recently I have been analyzing a large amount of data with &lt;a href=&quot;https://www.r-project.org/&quot;&gt;R&lt;/a&gt;. A great tool to do this is &lt;a href=&quot;https://www.rstudio.com&quot;&gt;Rstudio&lt;/a&gt;. It is an IDE for R that makes it easy to write your R code, explore the data and show the graphs. But if you want to communicate your results with others, sitting behind an IDE isn’t the best way. Fortunately Rstudio integrates with Knitr, RMarkdown and Pandoc. With those tools you can create PDF, HTML or word files from your R code.&lt;/p&gt;

&lt;p&gt;I was playing with this and ran into some problems. I eventually solved all of them and wanted to show my problems and solutions here, both for myself and other coming across the same problems. I am not going to give a complete how-to though. I suggest looking at the &lt;a href=&quot;http://rmarkdown.rstudio.com/&quot;&gt;RMarkdown documentation of Rstudio&lt;/a&gt; and the &lt;a href=&quot;http://kbroman.org/knitr_knutshell/pages/Rmarkdown.html&quot;&gt;Knitr RMarkdown documentation&lt;/a&gt; to get you started. This post will go over the following topics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How can I combine R loops with Markdown syntax to repeatedly show the test/plot results formatted with RMarkdown?&lt;/li&gt;
  &lt;li&gt;How can I display a table nicely in the resulting HTML/PDF?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;table-output-in-rmarkdown&quot;&gt;Table output in RMarkdown&lt;/h2&gt;

&lt;p&gt;To start with the quickest question first, you have to look at the second code block at the bottom. At the end it says &lt;code class=&quot;highlighter-rouge&quot;&gt;knitr::kable(coefs)&lt;/code&gt;. This is a function from Knitr that outputs a nice table in markdown syntax. If you pass it a table or data frame in R, the result is a nice looking table. Quite a nice function to have.&lt;/p&gt;

&lt;h2 id=&quot;loops-with-rmarkdown-to-repeat-results-with-different-data&quot;&gt;Loops with RMarkdown to repeat results with different data&lt;/h2&gt;

&lt;p&gt;With RMarkdown you can write Markdown syntax in an (Rmd) file, interspersed with code blocks with R code. Knitr reads the R-code, executes it in R and pastes the results back into the markdown output. That is then converted into HTML or PDF. 
The trick to looping over a set of data and running the same tests/plots for all parts of the data is splitting your file up into multiple files.
You have one “parent” file which loops over your data, and for each loop iteration, it calls a child file to do the actual analysis.&lt;/p&gt;

&lt;p&gt;Let’s use an example. I have data for about 300 species. For each one I would like to run the same analysis. Furthermore my species are grouped into species_groups. I would like to group the analyses in these species_groups.
I have a data frame called &lt;code class=&quot;highlighter-rouge&quot;&gt;samples&lt;/code&gt; with the actual data, and a list called &lt;code class=&quot;highlighter-rouge&quot;&gt;species_groups&lt;/code&gt; and a list called &lt;code class=&quot;highlighter-rouge&quot;&gt;species&lt;/code&gt;. All are saved in samples.RDa. By loading that the objects become available.&lt;/p&gt;

&lt;p&gt;In my parent file (see below) I loop over all species groups in &lt;code class=&quot;highlighter-rouge&quot;&gt;for(sg in species_groups)&lt;/code&gt; and with &lt;code class=&quot;highlighter-rouge&quot;&gt;for(sp in sort(species[species$species_group==sg,]$species_colname)){&lt;/code&gt; I loop over a sorted list of all species in the species group. Inside the inner loop the Knitr magic happens. The call to knit_child causes Knitr at that point to load the file ‘individual_species_blog.Rmd’ specified as an argument. This file is another Rmd file (see second code block) that contains Markdown with R code blocks interspersed.&lt;/p&gt;

&lt;p&gt;The child file does the actual analysis per species and outputs the results. The parent file only calls it.
What about the &lt;code class=&quot;highlighter-rouge&quot;&gt;out&amp;lt;-NULL&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;out&amp;lt;-c(out,knit_child(...))&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;paste(out...)&lt;/code&gt; lines in the parent file, I hear you ask? Well, the result of knit_child is already Markdown syntax. But anything inside the triple-back-quoted blocks in RMarkdown is printed in a code block, which would make a mess of the Markdown syntax that is the result of knit_child. So we instead make a vector called ‘out’ and append all the results of knit_child onto it. So in the end, after the last loop, out is a vector of a whole lot of strings. The inline code &lt;code class=&quot;highlighter-rouge&quot;&gt;paste(out, collapse='\n')&lt;/code&gt; prints the actual results and puts newline characters between the different strings.&lt;/p&gt;

&lt;p&gt;Talking about output, there are different ways to modify how the R code is being output into Markdown syntax. These are all specified in the &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; blocks for each block of R code. One that is important in this respect is the include=FALSE parameter that is in the R-block where knit_child is called. If you don’t include it, Knitr will print all kinds of other output in the Markdown file that has to do with the knit_child call. As it is stuff we don’t want in our final output, I say eval=TRUE so the code does get evaluated normally, but include=FALSE makes sure no output is actually included in the resulting Markdown file. As you can see, the subsequent paste(output…) call is outside this block, so the output of that statement ís included in the markdown file.&lt;/p&gt;

&lt;p&gt;The last thing tying it all together is making variables from the parent file available in the child file. This is where the environment comes in. Inside our species loop, we make a new environment for each species with &lt;code class=&quot;highlighter-rouge&quot;&gt;env.new()&lt;/code&gt;. This environment inherits from the parent environment. So anything that was available in our parent environment (like the variables &lt;code class=&quot;highlighter-rouge&quot;&gt;sg&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;sp&lt;/code&gt;  and &lt;code class=&quot;highlighter-rouge&quot;&gt;specnum&lt;/code&gt;) is also available in the new environment. But variables inside the child environment don’t accidentally carry over to other child environments. That way we can safely refer to &lt;code class=&quot;highlighter-rouge&quot;&gt;sp&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;specnum&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sg&lt;/code&gt; in our child Rmd file. The only problem is that the child Rmd file can’t be run individually anymore because these variables aren’t available anymore if the child Rmd file isn’t called from the parent Rmd file. The solution to this is to put something like &lt;code class=&quot;highlighter-rouge&quot;&gt;if(!exists('sp'))&lt;/code&gt; in your child Rmd file to specify a species if it isn’t specified already.&lt;/p&gt;

&lt;p&gt;The parent Rmd file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;test&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Dolf&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Andringa'&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;February&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;7,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2016&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;html_document&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;fig_caption&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;keep_md&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;number_sections&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;no&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;journal&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;toc&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;toc_depth&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;toc_float&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;collapsed&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;```&lt;/span&gt;{r getdata, results=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE}
load(&quot;samples.RDa&quot;)
library(knitr)
&lt;span class=&quot;p&quot;&gt;```&lt;/span&gt;
# Methods

.... some explanation

# Results
&lt;span class=&quot;p&quot;&gt;```&lt;/span&gt;{r echo=FALSE, eval=TRUE, include=FALSE}
out &amp;lt;- NULL
for(sg in species_groups){
  print(sg)
  specnum&amp;lt;-0
  for(sp in sort(species&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;species$species_group==sg,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;$species_colname)){
    sp&amp;lt;-sp #update the sp variable in the environment
    sp.common&amp;lt;-species&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;species$species_colname==sp,c(&quot;common_name&quot;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; #update the sp.common variable in the environment
    env=new.env() #create a new empty environment, it inherits objects from the current environment.
    out &amp;lt;- c(out, knit_child('individual_species_blog.Rmd', envir=env))
    specnum&amp;lt;-specnum+1
  } 
}
&lt;span class=&quot;sb&quot;&gt;```&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;`r paste(out, collapse='\n')`&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the child Rmd file (called individual_species_blog.Rmd):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Individual&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Species&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Dolf&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Andringa'&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;February&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;7,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2016&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;html_document&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;```&lt;/span&gt;{r echo=FALSE, eval=TRUE, include=FALSE}
library(knitr)
library(lmtest)
load(&quot;samples.RDa&quot;)
data &amp;lt;-subset(samples, species_group==sg)
data$y &amp;lt;- data&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;,c(sp)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;```&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;```&lt;/span&gt;{r eval='TRUE', echo=FALSE, results='asis'}
if(specnum==0) cat('&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;##',sg,'&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;');
&lt;span class=&quot;p&quot;&gt;```&lt;/span&gt;

### `r sp` {.tabset}
`r sp.common`

&lt;span class=&quot;p&quot;&gt;```&lt;/span&gt;{r eval=TRUE, echo=FALSE}

m&amp;lt;-glm(data$y~data$site_name, family=poisson)

coefs&amp;lt;-NULL
coefs$coefficient&amp;lt;-NULL
coefs$value&amp;lt;-NULL
coefs$pvalue&amp;lt;-NULL
coeft&amp;lt;-coeftest(m)
for(name in names(m$coefficients)){
    p&lt;span class=&quot;nt&quot;&gt;&amp;lt;-round&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;coeft&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Pr&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;|z|)&quot;)],3)
    coefs$coefficient&amp;lt;-c(coefs$coefficient,name)
    coefs$value&amp;lt;-c(coefs$value,m$coefficients&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;[name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;])
    coefs$pvalue&amp;lt;-c(coefs$pvalue,p)
}
coefs&amp;lt;-as.data.frame(coefs)
coefs&amp;lt;-coefs&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with(coefs,order(coefs$pvalue)),&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
knitr::kable(coefs)
&lt;span class=&quot;sb&quot;&gt;```&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><category term="blog" /><category term="R" /><category term="research" /><category term="statistics" /><category term="reporting" /><category term="RMarkdown" /><category term="Knitr" /><summary type="html">Recently I have been analyzing a large amount of data with R. A great tool to do this is Rstudio. It is an IDE for R that makes it easy to write your R code, explore the data and show the graphs. But if you want to communicate your results with others, sitting behind an IDE isn’t the best way. Fortunately Rstudio integrates with Knitr, RMarkdown and Pandoc. With those tools you can create PDF, HTML or word files from your R code.</summary></entry></feed>
