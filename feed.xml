<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://allican.be/feed.xml" rel="self" type="application/atom+xml" /><link href="http://allican.be/" rel="alternate" type="text/html" /><updated>2023-03-02T10:08:51+08:00</updated><id>http://allican.be/feed.xml</id><title type="html">All I can be - A weblog by Dolf Andringa</title><subtitle>This site is my personal showcase and outlet about what keeps me off the streets. It will mostly be about hacking, programming, GNU/Linux, but also about ecology, travel and science. I am a weird combination of an ecologist, hacker and ideologist.
</subtitle><entry><title type="html">Development of a full-stack of mobile and web-applications using Ionic and Flask Appbuilder</title><link href="http://allican.be/blog/2018/04/17/rapid-webapp-development-using-flask-appbuilder.html" rel="alternate" type="text/html" title="Development of a full-stack of mobile and web-applications using Ionic and Flask Appbuilder" /><published>2018-04-17T00:00:00+08:00</published><updated>2019-06-28T19:16:19+08:00</updated><id>http://allican.be/blog/2018/04/17/rapid-webapp-development-using-flask-appbuilder</id><content type="html" xml:base="http://allican.be/blog/2018/04/17/rapid-webapp-development-using-flask-appbuilder.html"><![CDATA[<p>For a project I am currently working on, I need to develop a web and mobile client. In short, it is a data-management system for a government agency where people in the field will report environmental data, while regional and national offices validate the data and use it in management reports.</p>

<p>Of course, I am using existing (open source) products as much as possible, not to re-invent the wheel. But by now I have a set of tools available that allow me to rapidly develop this stack.</p>

<p>So what am I using for this? To create nice looking reports/dashboard for policy makers and managers, I decided to use <a href="https://superset.incubator.apache.org/">Apache Superset</a>. This is an awesome tool that allows not-too-technical people (depends on your point of view I guess) to create dashboards that are great for policy makers. It can connect to a whole host of databases and pull the data in, and provides drag-and-drop interfaces to create graphs, pivot tables, filters, maps, etc. Basically anyone with decent MS Excel skills can also use superset.</p>

<p><a href="/images/modama stack.png"><img src="http://allican.be/images/modama%20stack.png" alt="The full application stack" height="700px" /></a></p>

<p>The nice thing for me personally, is that superset is developed using <a href="http://flaskappbuilder.pythonanywhere.com/">Flask App Builder</a> (FAB). I have been using Flask for a long time already so it allows me to extend Superset if needed. Also, it allows me to develop additional functionality in FAB and integrate the two in one application.</p>

<p>So the next element in the stack is a web-application built using FAB. The web-application allows government officials to see all the reported data and verify it to ensure data quality. Once verified, data will be available for the reports in Superset. Additionally, the web-application allows authentication and authorisation management. Different government agencies will report using different datasets. In the web-application we can configure who has access to which datasets. The datasets are defined using <a href="https://www.sqlalchemy.org/">SQLAlchemy</a>.</p>

<p>Aside from the security/credentials/authentication functionality, FAB also provides views functionality, which allow you to define views very easily based on your SQLAlchemy data models, providing nice looking CRUD functionality out of the box. So certain government officials can use the web-application to edit reports (for validation) or add new data based on paper reports (yes that still happens). FAB uses <a href="https://wtforms.readthedocs.io/en/stable/">WTForms</a> for the form generation. Since location is an important part of the data being collected, I also use <a href="https://geoalchemy-2.readthedocs.io/en/latest/">GeoAlchemy</a> to add the geographic component to the data models using PostGIS. This is where the first custom development comes in since FAB doesn’t support GeoAlchemy. Guess there will be a contribution from me coming to FAB soon :)</p>

<p>The next step is a mobile app that will be used by people in the field to collect data. Data will be collected on- or offline, using the mobile camera and GPS and data will be sent to the central server when internet is available. <a href="https://ionicframework.com/">Ionic</a> will be used for the mobile app development, which will basically just display forms for the datasets that the user has access to as defined on the server. Forms and validation are easy in Angular/Ionic. So I’ll create an app that gets a form definition from the server and dynamically generates the form from it. So how do I send the form/dataset definitions from the server to the mobile client? Using <a href="https://spacetelescope.github.io/understanding-json-schema/">JSON Schema</a>. This allows me to define the datasets, data types and restrictions like number limits, string formats (email, date time, length, etc) and turn that into a form in Angular. How do I generate the JSON Schema, I will use a library to convert the WTForms forms as generated by the FAB views into JSON Schema.</p>

<p>And how do the mobile and web-applications communicate? Using websockets. I will add those to FAB and add <a href="https://jwt.io/">JSON Web Token</a> functionality to the FAB security manager so the mobile app can store the JWT locally after the user logged-in once and use that for authentication.</p>

<p>I will write a number of articles next covering the non-standard parts of this whole stack. The topics covered will be the JWT authentication addition to FAB, the GeoAlchemy addition to FAB, the generation of the JSON Schema from WTForms and maybe a few other things. The standard parts won’t be covered in articles, just use the links above to find the docs of the respective packages. They all have excellent documentation.</p>]]></content><author><name></name></author><category term="flask" /><category term="flask-appbuilder" /><category term="ionic" /><category term="web-application" /><category term="software development" /><category term="websockets" /><category term="GIS" /><category term="JSON Schema" /><category term="forms" /><category term="superset" /><summary type="html"><![CDATA[For a project I am currently working on, I need to develop a web and mobile client. In short, it is a data-management system for a government agency where people in the field will report environmental data, while regional and national offices validate the data and use it in management reports.]]></summary></entry><entry><title type="html">Why Innovation Depends on a Free and Open Internet</title><link href="http://allican.be/blog/2017/07/13/why-innovation-depends-on-open-internet.html" rel="alternate" type="text/html" title="Why Innovation Depends on a Free and Open Internet" /><published>2017-07-13T00:00:00+08:00</published><updated>2019-06-28T19:16:19+08:00</updated><id>http://allican.be/blog/2017/07/13/why-innovation-depends-on-open-internet</id><content type="html" xml:base="http://allican.be/blog/2017/07/13/why-innovation-depends-on-open-internet.html"><![CDATA[<p>The last few months a lot of the media I watch/read/listen to have been up in arms about two topics: <a href="https://en.wikipedia.org/wiki/Net_neutrality">Net Neutrality</a> and <a href="https://en.wikipedia.org/wiki/Digital_rights_management">DRM</a>. Net neutrality means that internet providers should be neutral to the content that people consume through it instead of favoring or limiting some content providers (Facebook, Netflix, etc) over other for various reasons (political, commercial, etc). DRM (Digital Rights Management) on the other hand allows content providers (YouTube, Netflix, etc) to encrypt content on their websites and control who can decrypt it in order to protect their copyright. Advocates of Free and Open Source Software (FOSS), and advocates of an Open Internet have been crying out against the developments with the US <a href="https://www.wired.com/story/why-net-neutrality-matters-even-in-the-age-of-oligopoly/">FCC proposing to eliminate net neutrality</a> and with the <a href="https://www.theverge.com/2017/7/8/15942238/web-drm-standard-eme-approved-controversy">W3C (World Wide Web Consortium) about to adopt a DRM standard called EME (Encrypted Media Extension)</a>.</p>

<p>I generally consider myself part of the FOSS community and an advocate of an Open Internet. But with these discussions, I couldn’t shake the feeling that the conversations were often vague, political and full of great principles, but lacked a practical angle. What would these developments mean to me? Why is it bad that everyone in the Philippines is getting free Facebook on their cellphones? It’s not so crazy that Netflix wants to protect their shows from piracy right? It is hard to disagree with these developments. But after some further thought, I do understand what more practical consequences will be of these developments, and why they should be opposed. I will try to explain my view of the discussion with a practical angle, and how it would have influenced my personal development if DRM would have been part of the internet standards from the beginning and net neutrality would never have existed.</p>

<p>I grew up with the early computers and when i was in university, my initial internet connection was with a 56k dial-up modem on our regular phone line (to the annoyance of my house mates when they expected a call). Computer science and IT education was still young. Many of the people that started the large software and IT companies in that time didn’t study anything related to computer science or IT. They taught themselves. These are the people that created and enabled the enormous growth of the internet in the 90’s and 2000’s. I taught myself first network administration, got a job at my uni as system administrator, taught myself more, started doing network administration as a freelance guy, moved into Webdesign, discovered I’m no good at that, and moved on to software development. Now I teach at a university and am an independent consultant working for many different clients. Both my personal development, but also the development of the more successful people in the 90’s that created all the big internet, software and IT giants, all depended on people teaching themselves.</p>

<p>This self-taught development of many, many people depended on the fact that all the information needed for that personal growth was and still is available publicly on the internet. Anyone can write content and anyone can access it. Using a search engine it is really easy to find content. And many people decided to share their knowledge and experience for free. Sure, you give away something for free which might not make sense commercially initially, but people realised that if everyone shares information, everyone profits. And even if there are more people “consuming” good content than creating it, still it allows people to learn more easily and push for digital literacy and speed up adoption of new technologies. In the end, the innovative technology growth of the 90’s and present day wouldn’t have been possible without this open internet.</p>

<p>Even now, when technology education in the western world is well developed and people can learn the things I taught myself through regular educational institutes, there are many new fields that show the same growth: 3D printing, the maker scene, IoT, photography/film/content creation, drones and probably many more fields that I am not aware of, are growing rapidly because people can teach themselves and share knowledge with others on the other side of the world. You don’t need to live in a privileged area of a major city to have access to the resources to teach yourself. This is important in the west, where for instance <a href="www.blackgirlscode.com/">minority groups from less privileged parts of the US society</a> are being taught that through learning to code, they can create their own chances. But it is also important in developing countries where the level of education is much lower and access to knowledge is often restricted severely to the privileged elite. I see this every day in the Philippines. Here at my university, I tell my students, who are mostly not from the privileged elite, that even if you are from the poorest rural community, if you can manage to get access to a computer with an internet connection (something that is increasingly possible) you can teach yourself anything. You can create your own chances and your own employment. This is what I am trying to help my students with. For these parts of society, a free and open internet is an essential facility that enables economic growth for anyone, regardless of their background and money. I could even go on a tangent that the political troubles in many parts of the world are caused by the large gap between the rich and poor, and a free and open internet can be an essential tool in combating that difference and the violence that stems from it.</p>

<p>So how do DRM and net neutrality affect this? How is it bad that “<a href="https://arstechnica.com/information-technology/2017/05/a-trump-fcc-advisors-proposal-for-bringing-free-internet-to-poor-people/">poor people get free access to services</a>” like Facebook on their cellphones? Surely that can’t be bad? This argument is the main argument often heard against net neutrality. People say that if internet providers (Globe, Comcast, Verizon, PLDT) can make deals with content providers (Facebook, Google, Netflix, etc) to allow faster or cheaper or even free access to the content, it is easier for “poor people” to access this content. In the Philippines this is happening very clearly already. All cellphone providers have deals that basically means that access to Facebook from you cellphone is free. This affects the Philippines so much that it became <a href="http://technology.inquirer.net/58090/ph-worlds-no-1-terms-time-spent-social-media">the country whose people spend the most time on Facebook in the world</a>. What’s wrong with that? It created a generation in the Philippines that treats the internet and Facebook as equals. They ONLY use Facebook. Companies don’t have websites anymore, people don’t use email, there are many webshops that use Facebook only. People don’t use anything else. Even professional communication uses Facebook messenger instead of email here. I have never seen anything like it. And this means that Facebook now by itself completely controls the content that people here consume. Because the rest of the internet is not free, people still don’t have access to the wealth of information that exists outside Facebook. And of course Facebook doesn’t do this out of philanthropic motivation. By having all internet traffic and communication being channeled through them, they have a wealth of data that they sell for marketing. So letting go of net neutrality gives internet providers the ability to prefer some content providers and limit other content, without any transparency about their motivation (legal, commercial, etc). This doesn’t help anyone, it only has the potential (and makes good on this potential already in the Philippines) to restrict people to access publicly available content.</p>

<p>The same is true for DRM. The World Wide Web Consortium (W3C) is the governing body that wrote many standards that make the internet what it is today (HTML, CSS, etc). They are now about to endorse a standard that describes the encryption of content on the web in a way that allows the content provider to control who can decrypt and view the content. This is what Digital Rights Management (DRM) is. But in addition to that, US law stipulates that it is illegal to break this encryption, even if you have the legal right to view the content. So if you bought music or a video, but want to play it on a device that does not support the DRM software, or the company that provided it doesn’t exist anymore and thus making the DRM inoperable, it is still illegal for you to circumvent the DRM. And even if someone doesn’t even have the copyright to a piece of content (many old books and music is not copyrighted anymore, or made available for free), if they encrypt it for DRM, it is still illegal for you to break the DRM. But what about Netflix and YouTube, that want to make sure that the money they invested in creating content is earned back and people can’t “steal” their content for free? For them DRM makes sense right? As a principle: yes. But no form of DRM has been created yet that hasn’t been broken anyway. And while sharing that content is already illegal under copyright law, it hasn’t stopped people from pirating it anyway. This won’t change by creating a DRM web standard. People who pirate content will continue to pirate content, DRM or no DRM. And it is already illegal for them to do it. So DRM doesn’t really provide any protection beyond what is here.</p>

<p>The real problem lies in the fact that DRM is going to be made a web standard, just like HTML, CSS and many others. Right now, any company can create their own DRM mechanism. Spotify and Netflix already create their own apps that can implement any form of DRM they want. Of course, that has also been broken, but nothing is standing in the way of any companies to implement some form of DRM right now. The only thing that an open web standard from the W3C will do is make it much easier for companies to implement DRM strategies. And making this easy will severely push the adoption of DRM. Right now a company needs to invest quite serious resources to implement DRM and implementing DRM may require users to install additional software, thus inconveniencing them slightly.But this is a good thing. If it is worth it for a company to invest the time and money, they can do it, but people won’t implement DRM on a whim. Once people can implement DRM on a whim because the browsers support it out-of-the-box, the amount of content protected by DRM will increase rapidly. Content that might otherwise have been made available for free, now all of a sudden might become protected by DRM. And the IoT and cloud connected devices on Kickstarter have shown that it is quite common for companies to go bankrupt, and thus bricking the devices that their clients bought because their servers go offline. If DRM is adopted widely, this same problem will start with content which you won’t be able to decrypt once the content provider’s servers go offline.</p>

<p>So adopting an open DRM standard doesn’t really protect content providers against illegal piracy anymore than current copyright protection that already exists, while it will probably reduce the amount of publicly available information greatly. Together with abandoning net neutrality which will cause only content to be available to the public that is commercially interesting for the internet providers, I fear that in the long run these developments will greatly limit the ability for people to innovate and self-educate, and will prevent the innovative economic booms that we saw in the 90’s and 2000’s.</p>]]></content><author><name></name></author><category term="internet" /><category term="free" /><category term="open" /><category term="drm" /><category term="eme" /><category term="net_neutrality" /><summary type="html"><![CDATA[The last few months a lot of the media I watch/read/listen to have been up in arms about two topics: Net Neutrality and DRM. Net neutrality means that internet providers should be neutral to the content that people consume through it instead of favoring or limiting some content providers (Facebook, Netflix, etc) over other for various reasons (political, commercial, etc). DRM (Digital Rights Management) on the other hand allows content providers (YouTube, Netflix, etc) to encrypt content on their websites and control who can decrypt it in order to protect their copyright. Advocates of Free and Open Source Software (FOSS), and advocates of an Open Internet have been crying out against the developments with the US FCC proposing to eliminate net neutrality and with the W3C (World Wide Web Consortium) about to adopt a DRM standard called EME (Encrypted Media Extension).]]></summary></entry><entry><title type="html">Reverse Engineering a Cypress USB to Serial driver</title><link href="http://allican.be/blog/2017/01/28/reverse-engineering-cypress-serial-usb.html" rel="alternate" type="text/html" title="Reverse Engineering a Cypress USB to Serial driver" /><published>2017-01-28T00:00:00+08:00</published><updated>2019-06-28T19:16:19+08:00</updated><id>http://allican.be/blog/2017/01/28/reverse-engineering-cypress-serial-usb</id><content type="html" xml:base="http://allican.be/blog/2017/01/28/reverse-engineering-cypress-serial-usb.html"><![CDATA[<p>The last few weeks I have been busy on a solar monitoring project. I have a minimal viable product working based on an RS232 enabled inverter I have here. The first client I wanted to deploy it with has a similar inverter from the same company, just with a usb port instead of RS232. I was expecting it to be a serial over USB port that would just work as-is with a usb to serial driver, especially because it advertises itself as a Cypress USB to Serial device when you attach it to your computer. Unfortunately this wasn’t true, requiring me to reverse-engineer the USB communication for it. In the end this was easier than I thought it would be and it was a whole lot of fun. This post just shares the quest I went through.</p>

<p>The inverter uses a Cypress Serial to USB chip for communication with device ID 0665:5161.
This is the lsusb output:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$lsusb</span> <span class="nt">-vd</span> 0665:5161

Bus 001 Device 004: ID 0665:5161 Cypress Semiconductor USB to Serial
Couldn<span class="s1">'t open device, some information will be missing
Device Descriptor:
  bLength                18
  bDescriptorType         1
  bcdUSB               1.10
  bDeviceClass            0 (Defined at Interface level)
  bDeviceSubClass         0 
  bDeviceProtocol         0 
  bMaxPacketSize0         8
  idVendor           0x0665 Cypress Semiconductor
  idProduct          0x5161 USB to Serial
  bcdDevice            0.02
  iManufacturer           3 
  iProduct                1 
  iSerial                 0 
  bNumConfigurations      1
  Configuration Descriptor:
    bLength                 9
    bDescriptorType         2
    wTotalLength           34
    bNumInterfaces          1
    bConfigurationValue     1
    iConfiguration          0 
    bmAttributes         0xa0
      (Bus Powered)
      Remote Wakeup
    MaxPower              100mA
    Interface Descriptor:
      bLength                 9
      bDescriptorType         4
      bInterfaceNumber        0
      bAlternateSetting       0
      bNumEndpoints           1
      bInterfaceClass         3 Human Interface Device
      bInterfaceSubClass      0 No Subclass
      bInterfaceProtocol      0 None
      iInterface              0 
        HID Device Descriptor:
          bLength                 9
          bDescriptorType        33
          bcdHID               1.11
          bCountryCode            0 Not supported
          bNumDescriptors         1
          bDescriptorType        34 Report
          wDescriptorLength      27
         Report Descriptors: 
           ** UNAVAILABLE **
      Endpoint Descriptor:
        bLength                 7
        bDescriptorType         5
        bEndpointAddress     0x81  EP 1 IN
        bmAttributes            3
          Transfer Type            Interrupt
          Synch Type               None
          Usage Type               Data
        wMaxPacketSize     0x0008  1x 8 bytes
        bInterval              12</span></code></pre></figure>

<p>There is <a href="http://www.power-software-download.com/">stock software</a> with this inverter and many other inverters and UPS’s that use the same chip. This software runs on 32 and 64 bit windows, linux and mac, which is already an impressive list. But I need my software to run on an ARM device. The stock software is <a href="http://www.javadecompilers.com/">easy to decompile</a> and gave me a lot of info on the commands the inverter understands. It uses a native platform specific compiled driver through with a <a href="https://en.wikipedia.org/wiki/Java_Native_Interface">JNI interface</a> for it’s usb communication. This one is (as far as I can find) not available for ARM devices.</p>

<p>If you’re not using the supplied driver, the usbhid driver binds to it on Linux, suggesting it is a keyboard or mouse, even though it’s description is a Cypress USB to Serial device. The cypress_m8 driver for linux supports a Cypress USB to Serial devices that manifest itself as HID device.
Even though my device is not claimed by that driver, I hoped it might be supported by it nonetheless. Thanks to <a href="http://askubuntu.com/questions/408627/usb-to-serial-device-why-no-dev-entry">info on the ubuntu ask stackexchange site</a> I figured out how to add this device ID to the cypress_m8 driver and recompile it, but the driver complained a required endpoint was not available. So no luck there.</p>

<p>The next was going to be reverse engineering the supplied driver. I started looking at this point at the <a href="http://walac.github.io/pyusb/">PyUSB module</a>, which is an awesome python interface to the <a href="http://libusb.org/">libusb library</a>. It is quite easy to use it to communicate with usb devices in python. <a href="https://github.com/walac/pyusb/blob/master/docs/tutorial.rst">The tutorial</a> on it is really good, but left me wondering about how the device would communicate with the control, interrupt, isochronous and bulk messages. Some random tries to communicate with it failed.</p>

<p>To get more info on the communication, i looked at decompiling the supplied driver, which is a whole can of worms that’s definitely not a magic bullet. There’s a few good disassemblers and decompilers available, but they didn’t supply me with any good info beyond what the <a href="https://en.wikipedia.org/wiki/Objdump">objdump</a> and <a href="https://linux.die.net/man/1/strings">strings</a> tools in linux can already give you.</p>

<p>Using objdump I saw a lot of the functions that are in the driver. Googling those function names, it turned out that most of this driver is actually just the regular open source libusb driver (is it even legal for them to publish a closed source driver containing the libusb code?). It just implements a few extra functions around it, and a <a href="https://en.wikipedia.org/wiki/Java_Native_Interface">Java JNI</a> set of functions on top of that. So my pyusb (or any libusb based library for that matter) direction was the right one. I just needed to figure out what those extra functions were doing. Googling one of then (ups_write), I figured out that <a href="https://github.com/k3a/Fortron-FSP-EP-650">K3A reverse engineered his UPS</a> based on the same chip already. This was an enormous help, even though it’s only just a few lines of code really. I definitely owe him a <a href="https://beeroverip.org/pilsner-urquell/">Beer over IP</a>. It confirmed that I was heading in the right direction, and he showed me exactly what the ups_write and ups_read functions are doing. Ups_write is sending control messages and ups_read does an interrupt transfer to get the response back. That is really most of what I needed. With this knowledge I could send messages to my inverter and get data back.</p>

<p>The messages for his UPS differ from the ones of my inverter though. I already figured out the messages that these inverters need from the Java code, but it looked like the driver (probably in the Java JNI functions) is translating these messages into something else before sending them to the UPS. So needed to still test the communication between the driver on my pc and the inverter. A complication is that although I have vpn access to the arm box attached to the specific inverter, it is located over an hour drive away from me in a workshop, and the whole problem stated in the first place because their driver doesn’t work on ARM.</p>

<p>Was I going to get in a car and drive there for capturing the communication between the stock software and inverter on my laptop? Of course not! Enter the <a href="http://usbip.sourceforge.net/">USB/IP project</a>. They wrote a daemon and driver to allow you to forward usb communication over IP, allowing me to share the inverter’s usb connection from the ARM box, through the VPN to my local laptop, and run the software locally as if it was connected directly to it.</p>

<p>So the now I could use wireshark and usbmon to directly monitor. The steps to take are start wireshark on the usbmon interface. Start capturing and then start the “working” application. Let it go until you feel the application got data through USB that it understands, stop it and stop the capturing in wireshark. At that point you should have some useful USB data. You should filter in wireshark to only see the relevant data. I did it with the filter usb.bus_id == 4, which filters everything on the bus that my device (usbip device) is on. You can check which bus it is on with ‘lsusb’ in linux.</p>

<p>Next you need to see if you can create the same traffic from pyusb. So I opened a second wireshark instance (so I can compare the two side-by-side), started capturing in this one and then started python and setup the usb device there. I used the following code for that:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">usb.core</span><span class="p">,</span> <span class="n">usb</span><span class="p">.</span><span class="n">util</span><span class="p">,</span> <span class="n">usb</span><span class="p">.</span><span class="n">control</span>
<span class="kn">import</span> <span class="nn">crc16</span>
<span class="n">vendorId</span> <span class="o">=</span> <span class="mh">0x0665</span>
<span class="n">productId</span> <span class="o">=</span> <span class="mh">0x5161</span>
<span class="n">interface</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">dev</span> <span class="o">=</span> <span class="n">usb</span><span class="p">.</span><span class="n">core</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">idVendor</span><span class="o">=</span><span class="n">vendorId</span><span class="p">,</span> <span class="n">idProduct</span><span class="o">=</span><span class="n">productId</span><span class="p">)</span>
<span class="k">if</span> <span class="n">dev</span><span class="p">.</span><span class="n">is_kernel_driver_active</span><span class="p">(</span><span class="n">interface</span><span class="p">):</span>
    <span class="n">dev</span><span class="p">.</span><span class="n">detach_kernel_driver</span><span class="p">(</span><span class="n">interface</span><span class="p">)</span>
<span class="n">dev</span><span class="p">.</span><span class="n">set_interface_altsetting</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span></code></pre></figure>

<p>What the vendorID, productID and interface numbers are depends on your device. <code class="language-plaintext highlighter-rouge">lsusb -vd &lt;vendorId&gt;:&lt;productID&gt;</code> might give you more info. This is where <a href="https://github.com/k3a/Fortron-FSP-EP-650/blob/master/main.cpp">K3A helped me a lot</a>.</p>

<p>From that point you need to look in wireshark at the USB data going back and forth. As I said I had two windows open, one with the data sent by the program I had (and it’s driver) the other with the data I sent back and forth. If you click on a packet in wireshark, you see two panels with the data being sent. The bottom panel contains the raw hexadecimal and text representations of that data side by side, while the middle one contains the interpretation of that for this protocol. So if you click on a field in the middle panel, it will highlight the hex and text data that correspond to it in the bottom. If you see differences between data between both wireshark windows, you can see that way which USB/URB fields are actually different. There are a few that will always be different, namely the URB id, URB sec and URB usec fields. So don’t worry about those. In my case, when talking USB control requests, the main points to get right where the bmRequestType (0x21 in the example below) bRequest (0x09), wValue (0x0200), wIndex(0x0000), wLength (0x0008) and the actual Data Fragment.</p>

<ul>
  <li><img src="/images/wireshark_usbmon.png" alt="Wireshark USB monitoring data" /></li>
</ul>

<p>The Data Fragment is the real data you are sending in the body of the control request. That is the part that changed for me and I had to figure out myself. Basically for this inverter it consists of a string (QPI in the example), followed by a 2 byte CRC (<a href="https://pypi.python.org/pypi/crc16/">crc16.crcxmodem</a> in python helped here) and a linefeed character ‘\r’, and then padded with null characters up to 8 bytes. Knowing this, I could send any command to the inverter and get valid data back. In this case, the data comes back through an interrupt message.</p>

<p>So this was the snippet of test code that I wrote that allowed me to send commands to the inverter and get data back:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">getCommand</span><span class="p">(</span><span class="n">cmd</span><span class="p">):</span>
    <span class="n">cmd</span> <span class="o">=</span> <span class="n">cmd</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">)</span>
    <span class="n">crc</span> <span class="o">=</span> <span class="n">crc16</span><span class="p">.</span><span class="n">crc16xmodem</span><span class="p">(</span><span class="n">cmd</span><span class="p">).</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="s">'big'</span><span class="p">)</span>
    <span class="n">cmd</span> <span class="o">=</span> <span class="n">cmd</span><span class="o">+</span><span class="n">crc</span>
    <span class="n">cmd</span> <span class="o">=</span> <span class="n">cmd</span><span class="o">+</span><span class="sa">b</span><span class="s">'</span><span class="se">\r</span><span class="s">'</span>
    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">8</span><span class="p">:</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="n">cmd</span><span class="o">+</span><span class="sa">b</span><span class="s">'</span><span class="se">\0</span><span class="s">'</span>
    <span class="k">return</span> <span class="n">cmd</span>

<span class="k">def</span> <span class="nf">sendCommand</span><span class="p">(</span><span class="n">cmd</span><span class="p">):</span>
    <span class="n">dev</span><span class="p">.</span><span class="n">ctrl_transfer</span><span class="p">(</span><span class="mh">0x21</span><span class="p">,</span> <span class="mh">0x9</span><span class="p">,</span> <span class="mh">0x200</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">cmd</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">getResult</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="mi">100</span><span class="p">):</span>
    <span class="n">res</span><span class="o">=</span><span class="s">""</span>
    <span class="n">i</span><span class="o">=</span><span class="mi">0</span>
    <span class="k">while</span> <span class="s">'</span><span class="se">\r</span><span class="s">'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">res</span> <span class="ow">and</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">20</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">res</span><span class="o">+=</span><span class="s">""</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="nb">chr</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">dev</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="mh">0x81</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">timeout</span><span class="p">)</span> <span class="k">if</span> <span class="n">i</span><span class="o">!=</span><span class="mh">0x00</span><span class="p">])</span>
        <span class="k">except</span> <span class="n">usb</span><span class="p">.</span><span class="n">core</span><span class="p">.</span><span class="n">USBError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">e</span><span class="p">.</span><span class="n">errno</span> <span class="o">==</span> <span class="mi">110</span><span class="p">:</span>
                <span class="k">pass</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">raise</span>
        <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
    <span class="k">return</span> <span class="n">res</span>

<span class="n">sendCommand</span><span class="p">(</span><span class="n">getCommand</span><span class="p">(</span><span class="s">'QPI'</span><span class="p">))</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">getResult</span><span class="p">()</span></code></pre></figure>

<p>It’s the world’s smallest driver ever, once again <a href="https://en.wikipedia.org/wiki/Standing_on_the_shoulders_of_giants">standing on the shoulders of giants</a>.
Of course I need to now abstract it to a level where I can request specific variables from the inverter, check the integrity of the returned data, which also contains a 2-byte CRC16, etc. But at this point that is a matter of either knowing what the messages and it’s responses mean (which I do) or just repeating the messages yourself using python code and then looking at the returned data and looking at the inverter to see which number means what (a bit less reliable). One tip is to attach a device to the inverter and request all those variables frequently and logging it in a database or CSV file. Looking at the numbers over time, combined with knowledge about the inverter and how they work can get you a long way to figure this out.</p>]]></content><author><name></name></author><category term="usb" /><category term="reverse_engineering" /><category term="python" /><category term="usbip" /><category term="cypress" /><category term="driver" /><category term="solar" /><summary type="html"><![CDATA[The last few weeks I have been busy on a solar monitoring project. I have a minimal viable product working based on an RS232 enabled inverter I have here. The first client I wanted to deploy it with has a similar inverter from the same company, just with a usb port instead of RS232. I was expecting it to be a serial over USB port that would just work as-is with a usb to serial driver, especially because it advertises itself as a Cypress USB to Serial device when you attach it to your computer. Unfortunately this wasn’t true, requiring me to reverse-engineer the USB communication for it. In the end this was easier than I thought it would be and it was a whole lot of fun. This post just shares the quest I went through.]]></summary></entry><entry><title type="html">Drawing images and interactively change text on a canvas using Angular JS.</title><link href="http://allican.be/blog/2017/01/16/drawing-images-and-changing-text-on-a-canvas-with-angular.html" rel="alternate" type="text/html" title="Drawing images and interactively change text on a canvas using Angular JS." /><published>2017-01-16T00:00:00+08:00</published><updated>2019-06-28T19:16:19+08:00</updated><id>http://allican.be/blog/2017/01/16/drawing-images-and-changing-text-on-a-canvas-with-angular</id><content type="html" xml:base="http://allican.be/blog/2017/01/16/drawing-images-and-changing-text-on-a-canvas-with-angular.html"><![CDATA[<p>So I love <a href="https://angularjs.org/">AngularJS</a> (or Angular as <a href="https://www.infoq.com/news/2016/12/angular-4">you’re supposed to call it now</a>) for creating the interfaces of web-applications. I have really started to decouple the interfaces I make from the backend, by using Angular for the front-end and <a href="http://flask.pocoo.org">flask</a> to create a RESTful backend with which Angular communicates. It’s awesome. Right now I am making a web-interface that draws an image and dynamically changes numbers in that image depending on data it fetches from the backend. It is used in this case to show an image of a Solar Power system and dynamically change numbers in the image, showing the current state (battery capacity, panel output, power consumption, etc) of their system. I am using Angular for this and the <a href="http://www.w3schools.com/html/html5_canvas.asp">HTML5 Canvas</a> object.</p>

<p>What I’m trying to do is load a static png image in the canvas, and draw text in that canvas as well that is stored in the scope of the controller. This is why I like Angular. You just define a variable in your controller, and whenever that value changes in the controller, automatically the web-interface changes according to the changing data. No complicated event handling necessary (well, Angular does that for you). This is a screenshot of the finished version of what I was trying to do:</p>

<ul>
  <li><img src="/images/solar_state_canvas_angular.png" alt="Dynamically changing text in solar system image" /></li>
</ul>

<p>All the numbers in the drawing change dynamically with changing data from a web-service, but are located within the canvas that the png image is in too, so there is not html/css positioning nightmare.</p>

<p>When writing this interface, I ran into a number of problems that I thought would be useful to share the solution about. All of my solutions were the result of Google magic, especially due to <a href="http://stackoverflow.com">StackOverflow</a>, so major credit really goes to the community, and be sure to hone your google skills before asking others to help you.</p>

<p>Before I go over the specific problems I had and how I solved them, here is a complete working example, including comments, of the final solutions that I came up with. The result isn’t particularly beautiful because I wanted to keep the code and markup to a minimum as not to obfuscate the core. If you are looking into making a nice looking interface with angular, I suggest you look at <a href="https://material.angularjs.org/">Angular Material</a>.</p>

<p data-height="477" data-theme-id="0" data-slug-hash="EZgyXv" data-default-tab="js,result" data-user="dolfandringa" data-embed-version="2" data-pen-title="Drawing an image on a canvas with Angular" class="codepen">See the Pen <a href="https://codepen.io/dolfandringa/pen/EZgyXv/">Drawing an image on a canvas with Angular</a> by Dolf Andringa (<a href="http://codepen.io/dolfandringa">@dolfandringa</a>) on <a href="http://codepen.io">CodePen</a>.</p>
<script async="" src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<p>The code creates a custom <a href="https://docs.angularjs.org/guide/directive">angular directive</a> (called stateGraph/state-graph) that can be set as an attribute on a canvas tag. When you do, angular kicks in and handles the canvas. The angular code creates an additional attribute for the canvas tag called “numbers” where you set the variable (an object in this case) that contains the data that should be drawn (and updated) in the canvas. The stateGraph directive uses an isolated scope for this. This means that the scope inside the stateGraph directive is not the same scope as the scope of the controller. Instead, the “numbers” attribute of the canvas tag is where the variable from the controller ($scope.ctrlnumbers) is assigned to the scope of the directive (scope.numbers). This way, the controller can change the $scope.ctrlnumbers on the scope, and those same numbers are watched by the directive scope.numbers, which updates the canvas when they change.</p>

<p>Ok, so this way I can create a function (now just a function that is triggered by a timeout and adds/multiplies numbers, but this can be changed to something that fetches values from a web-service) inside the controller that changes numbers, and the canvas directive is changed when those numbers change. The problem I still had (which is canvas related, not angular related) is how to <em>change</em> text in the canvas instead of just adding numbers on top of each other. The canvas object doesn’t have any concept of variables. I is just a piece of digital paper on which you can draw and erase. And there lies the trick. To change text, you need to erase the old text and then add new text. This is what the drawNumber function does. It first clips the canvas to the circle where the text is. This ensure that everything that is done in the canvas from that point on, only affects the clipped area. I then do a clearRect() for clear the area where the text is. As the canvas is clipped, this will only erase whatever is in the clipped area, nothing outside. Then I restore the canvas (undo the clipping) and set the new text in the canvas.</p>

<p>The last thing I want to explain is how I fixed that my png image wasn’t actually showing up on my canvas. I could see in the “Network” tab of the developer tools of my browser that the image was loading, it just didn’t show up. The trick was to first create an onload function for the image object in which the image is drawn on the canvas, and only then set the src attribute. That way, the image starts loading as soon as you set the src attribute for it, and when it finishes, the onload method is called, which puts it on the canvas.</p>

<p>I hope this code and explanation helps someone out there with some mad google skills.</p>]]></content><author><name></name></author><category term="angularjs" /><category term="web-application" /><category term="website" /><category term="development" /><category term="canvas" /><category term="html5" /><summary type="html"><![CDATA[So I love AngularJS (or Angular as you’re supposed to call it now) for creating the interfaces of web-applications. I have really started to decouple the interfaces I make from the backend, by using Angular for the front-end and flask to create a RESTful backend with which Angular communicates. It’s awesome. Right now I am making a web-interface that draws an image and dynamically changes numbers in that image depending on data it fetches from the backend. It is used in this case to show an image of a Solar Power system and dynamically change numbers in the image, showing the current state (battery capacity, panel output, power consumption, etc) of their system. I am using Angular for this and the HTML5 Canvas object.]]></summary></entry><entry><title type="html">Creating dummy serial ports in pure python.</title><link href="http://allican.be/blog/2017/01/15/python-dummy-serial-port.html" rel="alternate" type="text/html" title="Creating dummy serial ports in pure python." /><published>2017-01-15T00:00:00+08:00</published><updated>2019-06-28T19:16:19+08:00</updated><id>http://allican.be/blog/2017/01/15/python-dummy-serial-port</id><content type="html" xml:base="http://allican.be/blog/2017/01/15/python-dummy-serial-port.html"><![CDATA[<p>Recently I needed to reverse-engineer the serial communication between a solar inverter and a computer. Although hardware manufactures may often be good at making the hardware they sell, their accompanying software often leaves a lot to be desired. To develop my own software, I needed to interface with a specific inverter, both to intercept the serial communication at first, but later to write my own software. In order to be able to write unittests for the serial port, and to test my software without actually being connected to an inverter, I wanted to have a dummy serial port on my computer that listens for any connections to the port and responds whatever I tell it to.</p>

<p>Many <a href="http://stackoverflow.com/questions/15173614/how-can-i-use-a-pseudoterminal-in-python-to-emulate-a-serial-port">questions have been asked on stackoverflow</a> about this (including by me), and an often recurring answer seems to be using software like socat for this. Socat definitely works well for communicating with serial ports, dumping data from serial ports to files, etc. I needed to also write tests for a piece of software that I was writing in python. Again, Mock protocols can be used for this and are often the best solution, but I was stubborn and wanted to figure out how to setup a dummy serial port that other software can communicate with.</p>

<p>The trick is to use <a href="https://en.wikipedia.org/wiki/Pseudoterminal">pseudoterminals</a> in Linux. Pseudoterminals can be used (and are used) for many things, but serial communication can be one. Basically it is just a file that software can write to or read from as if it was a serial connection. Pseudoterminals work with a master and slave. One end is the master, which in my case is where my “dummy serial device” is listening. The slave side is the code/software I wanted to test. The master is usually /dev/ptmx on linux, while the slave is often of the form /dev/pts/&lt;x&gt; where x is any integer. The master endpoint is constant, even with multiple psuedoterminal connections, the master endpoint doesn’t change. The slave endpoints do have one for each psuedoterminal.</p>

<p>This is where the trick was that I ran in to. Python has a <a href="https://docs.python.org/3/library/pty.html">pty module</a> that you can use to setup this master and slave pair. The <a href="https://docs.python.org/3/library/pty.html#pty.openpty">pty.openpty()</a> function returns two file descriptors, one for the master and one for the slave. These file descriptors already are opened and can be read from with <a href="https://docs.python.org/3/library/os.html#os.read">os.read</a> or written to with <a href="os.write">os.write</a>. They are not filenames but file descriptors. With <a href="https://docs.python.org/3/library/os.html#os.ttyname">os.ttyname</a> you can retrieve the actual filename of those file descriptors. But if you create a new file object for the master endpoint, you actually create a new file descriptor and instead of using the already opened connection to the slave, a new pseudoterminal (slave) will be created, with a new connection to the master. So while you can re-open the slave multiple times with different file descriptors and keep using the same connection to the master, you can’t open multiple file descriptors to the master that connect to the same slave.</p>

<p>So to show some code with comments:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span><span class="p">,</span> <span class="n">pty</span>
<span class="kn">from</span> <span class="nn">serial</span> <span class="kn">import</span> <span class="n">Serial</span>
<span class="kn">import</span> <span class="nn">threading</span>

<span class="k">def</span> <span class="nf">listener</span><span class="p">(</span><span class="n">port</span><span class="p">):</span>
    <span class="c1">#continuously listen to commands on the master device
</span>    <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="sa">b</span><span class="s">""</span>
        <span class="k">while</span> <span class="ow">not</span> <span class="n">res</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="sa">b</span><span class="s">"</span><span class="se">\r\n</span><span class="s">"</span><span class="p">):</span>
            <span class="c1">#keep reading one byte at a time until we have a full line
</span>            <span class="n">res</span> <span class="o">+=</span> <span class="n">os</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">port</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"command: %s"</span> <span class="o">%</span> <span class="n">res</span><span class="p">)</span>

        <span class="c1">#write back the response
</span>        <span class="k">if</span> <span class="n">res</span> <span class="o">==</span> <span class="sa">b</span><span class="s">'QPGS</span><span class="se">\r\n</span><span class="s">'</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">port</span><span class="p">,</span> <span class="sa">b</span><span class="s">"correct result</span><span class="se">\r\n</span><span class="s">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">port</span><span class="p">,</span> <span class="sa">b</span><span class="s">"I dont understand</span><span class="se">\r\n</span><span class="s">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">test_serial</span><span class="p">():</span>
    <span class="s">"""Start the testing"""</span>
    <span class="n">master</span><span class="p">,</span><span class="n">slave</span> <span class="o">=</span> <span class="n">pty</span><span class="p">.</span><span class="n">openpty</span><span class="p">()</span> <span class="c1">#open the pseudoterminal
</span>    <span class="n">s_name</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">ttyname</span><span class="p">(</span><span class="n">slave</span><span class="p">)</span> <span class="c1">#translate the slave fd to a filename
</span>
    <span class="c1">#create a separate thread that listens on the master device for commands
</span>    <span class="n">thread</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">listener</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">[</span><span class="n">master</span><span class="p">])</span>
    <span class="n">thread</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>

    <span class="c1">#open a pySerial connection to the slave
</span>    <span class="n">ser</span> <span class="o">=</span> <span class="n">Serial</span><span class="p">(</span><span class="n">s_name</span><span class="p">,</span> <span class="mi">2400</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">ser</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s">'test2</span><span class="se">\r\n</span><span class="s">'</span><span class="p">)</span> <span class="c1">#write the first command
</span>    <span class="n">res</span> <span class="o">=</span> <span class="sa">b</span><span class="s">""</span>
    <span class="k">while</span> <span class="ow">not</span> <span class="n">res</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="sa">b</span><span class="s">'</span><span class="se">\r\n</span><span class="s">'</span><span class="p">):</span>
        <span class="c1">#read the response
</span>        <span class="n">res</span> <span class="o">+=</span><span class="n">ser</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"result: %s"</span> <span class="o">%</span> <span class="n">res</span><span class="p">)</span>
    <span class="n">ser</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">b</span><span class="s">'QPGS</span><span class="se">\r\n</span><span class="s">'</span><span class="p">)</span> <span class="c1">#write a second command
</span>    <span class="n">res</span> <span class="o">=</span> <span class="sa">b</span><span class="s">""</span>
    <span class="k">while</span> <span class="ow">not</span> <span class="n">res</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="sa">b</span><span class="s">'</span><span class="se">\r\n</span><span class="s">'</span><span class="p">):</span>
        <span class="c1">#read the response
</span>        <span class="n">res</span> <span class="o">+=</span><span class="n">ser</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"result: %s"</span> <span class="o">%</span> <span class="n">res</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">test_serial</span><span class="p">()</span></code></pre></figure>

<p>This script has a listener function in a separate thread constantly listening on the master side for commands and responding accordingly. The test_serial function first starts the listener thread and then uses <a href="https://pythonhosted.org/pyserial/">pySerial</a> to open a serial connection to the slave. It sends a command and reads the response. And then repeats it with a different command.</p>

<p>I hope this clarifies how to use psuedoterminals for dummy serial connections in python.</p>]]></content><author><name></name></author><category term="python" /><category term="pyserial" /><category term="solar" /><category term="pseudoterminal" /><summary type="html"><![CDATA[Recently I needed to reverse-engineer the serial communication between a solar inverter and a computer. Although hardware manufactures may often be good at making the hardware they sell, their accompanying software often leaves a lot to be desired. To develop my own software, I needed to interface with a specific inverter, both to intercept the serial communication at first, but later to write my own software. In order to be able to write unittests for the serial port, and to test my software without actually being connected to an inverter, I wanted to have a dummy serial port on my computer that listens for any connections to the port and responds whatever I tell it to.]]></summary></entry><entry><title type="html">NRF24L01 and SPIDEV on the Beagle Bone Black</title><link href="http://allican.be/blog/2016/11/01/nrf24l01-beaglebone-black.html" rel="alternate" type="text/html" title="NRF24L01 and SPIDEV on the Beagle Bone Black" /><published>2016-11-01T00:00:00+08:00</published><updated>2019-06-28T19:16:19+08:00</updated><id>http://allican.be/blog/2016/11/01/nrf24l01-beaglebone-black</id><content type="html" xml:base="http://allican.be/blog/2016/11/01/nrf24l01-beaglebone-black.html"><![CDATA[<p>I am working on various electronics projects where I want to have a sensor node that collects data from a sensor and either logs it to a micro-SD-card directly or sens it wirelessly to another machine that uses/logs/etc the data. I opted for a set of <a href="http://www.nordicsemi.com/eng/Products/2.4GHz-RF/nRF24L01">NRF24L01+</a> boards for the wireless communication between the nodes and data loggers. So to test it out I want to communicate between my <a href="http://www.nordicsemi.com/eng/Products/2.4GHz-RF/nRF24L01">Beagle Bone Black</a> and an <a href="https://www.arduino.cc/">Arduino</a>. The <a href="https://www.arduino.cc/">NRF24 library by TMRh20</a> supplies a unified API for the NRF24L01 that should work on Arduino, linux (like Beagle Bone Black and Raspberry Pi) and other platforms. It also includes some examples that are identical across platforms so you can test between platforms with the same code. Really cool. I had trouble getting it to work on my Beagle Bone Black. This post hopefully will help other getting it to work on a Beagle Bone Black running Debian Jessy.</p>

<p>There are various howto’s about the Beagle Bone Black and RF24, and as so often with the BBB, there are many articles contradicting eachother, using different pinouts than my BBB uses I guess. What I have found is that the only reliable pinout for a BBB is the one specified on the standard webinterface of your BBB (on the front-page at the bottom). So the only really useful how-to I ended up using is about the RF24 library on [https://tmrh20.github.io/RF24/Linux.html], which doesn’t talk about the BBB specifically. So after installing the RF24 library I just tried what some other how-to’s said but as soon as I started the “gettingstarted” example from there, I got the error</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">RF24/examples/GettingStarted/
can<span class="s1">'t open device: No such file or directory
Aborted</span></code></pre></figure>

<p>It took me quite a while to figure out what was going wrong. It turned out to be various problems, mostly related to the SPI bus and it’s pinout.</p>

<p>The NRF24L01 uses the SPI bus for communication. The Beagle Bone Black uses SPIDEV for this and has two SPI buses. Those need to be enabled, and for them (or I believe actually only 1 of the 2) to work, the HDMI bus needs to be disabled. What I had to do was first edit <code class="language-plaintext highlighter-rouge">/bootuEnv.txt</code> and make sure the following two lines were in there:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">cape_disable</span><span class="o">=</span>bone_capemgr.disable_partno<span class="o">=</span>BB-BONELT-HDMI,BB-BONELT-HDMIN
<span class="nv">cape_enable</span><span class="o">=</span>bone_capemgr.enable_partno<span class="o">=</span>BB-SPIDEV0,BB-SPIDEV1</code></pre></figure>

<p>After that you need to restart your beaglebone. With</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">ls</span> /dev/spi<span class="k">*</span>
/dev/spidev1.0  /dev/spidev1.1  /dev/spidev2.0  /dev/spidev2.1</code></pre></figure>

<p>you can see the devices are there.
You can also see they are available with</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># cat /sys/devices/platform/bone_capemgr/slots </span>
0: PF----  <span class="nt">-1</span> 
1: PF----  <span class="nt">-1</span> 
2: PF----  <span class="nt">-1</span> 
3: PF----  <span class="nt">-1</span> 
4: P-O-L-   0 Override Board Name,00A0,Override Manuf,BB-SPIDEV0
5: P-O-L-   1 Override Board Name,00A0,Override Manuf,BB-SPIDEV1</code></pre></figure>

<p>BB-SPIDEV0 I think corresponds to /dev/spidev1* and BB-SPIDEV1 to /dev/spidev2*. in the filesystem. If you look at the pinout for my Beagle Bone Black (but be sure to check yours on the web-interface of yours) specifies the following pinouts:</p>

<ul>
  <li><img src="/images/bbb_spi_pinout.png" alt="Beagle Bone Black SPI pinout" />.</li>
</ul>

<p>There, the pins SPI1_DO, SPI1_D1, SPI1_CSO and SPI1_SCLK correspond to BB-SPIDEV1 and /dev/spidev2*. So I wired my NRF24L01+ in the following way:</p>

<table>
  <thead>
    <tr>
      <th>Beagle Bone</th>
      <th>NRF pin name</th>
      <th>NRF pin number</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>DGND</td>
      <td>GND</td>
      <td>1</td>
    </tr>
    <tr>
      <td>VDD3V3</td>
      <td>VCC</td>
      <td>2</td>
    </tr>
    <tr>
      <td>GPIO_115</td>
      <td>CE</td>
      <td>3</td>
    </tr>
    <tr>
      <td>SPI1_CSO</td>
      <td>CSN</td>
      <td>4</td>
    </tr>
    <tr>
      <td>SPI1_D0</td>
      <td>MOSI</td>
      <td>6</td>
    </tr>
    <tr>
      <td>SPI1_D1</td>
      <td>MISO</td>
      <td>7</td>
    </tr>
    <tr>
      <td>SPI1_SCLK</td>
      <td>SCLK</td>
      <td>5</td>
    </tr>
  </tbody>
</table>

<p>After having it wired like this I wanted to get the gettingstarted sample in <em>~/rf24libs/RF24/examples_linux/gettingstarted.cpp</em> to work. The problem I had there is that the RF24 radio() statement in there, which instantiates the RF24 radio is different on Linux than it is on Arduino. On Arduino you give the radio() function the pin numbers to which the CE and CSN pins of the NRF24 are connected. With the Beagle Bone Black and SPIDEV the first argument is the pin number of the CE pin, while the second argument is the number of the SPI device that it is connected to. If you connected it as I showed above, the CE pin is connected to pin GPIO_115 (pin 27 of header P9) and you’re using SPI1. So the line with RF12 radio() in <em>~/rf24libs/RF24/examples_linux/gettingstarted.cpp</em> should look like this:</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">RF24</span> <span class="nf">radio</span><span class="p">(</span><span class="mi">115</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span></code></pre></figure>

<p>The first argument specifies the CE pin is GPIO_115 while the second says that it uses SPI1, or in other words <em>/dev/spidev2.0</em>.</p>

<p>After that you need to run</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">make gettingstarted</code></pre></figure>

<p>in the <em>~/rf24libs/RF24/examples_linux</em> directory to compile it.
After that, the example works (provided you have another device, like an Arduino, with an NRF24L01 listening to pong back):</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># ./gettingstarted</span>
RF24/examples/GettingStarted/
STATUS       <span class="o">=</span> 0x0e <span class="nv">RX_DR</span><span class="o">=</span>0 <span class="nv">TX_DS</span><span class="o">=</span>0 <span class="nv">MAX_RT</span><span class="o">=</span>0 <span class="nv">RX_P_NO</span><span class="o">=</span>7 <span class="nv">TX_FULL</span><span class="o">=</span>0
RX_ADDR_P0-1     <span class="o">=</span> 0x65646f4e34 0x65646f4e33
RX_ADDR_P2-5     <span class="o">=</span> 0xc3 0xc4 0xc5 0xc6
TX_ADDR      <span class="o">=</span> 0x65646f4e34
RX_PW_P0-6   <span class="o">=</span> 0x20 0x20 0x00 0x00 0x00 0x00
EN_AA        <span class="o">=</span> 0x3f
EN_RXADDR    <span class="o">=</span> 0x02
RF_CH        <span class="o">=</span> 0x4c
RF_SETUP     <span class="o">=</span> 0x03
CONFIG       <span class="o">=</span> 0x0e
DYNPD/FEATURE    <span class="o">=</span> 0x00 0x00
Data Rate    <span class="o">=</span> 1MBPS
Model        <span class="o">=</span> nRF24L01+
CRC Length   <span class="o">=</span> 16 bits
PA Power     <span class="o">=</span> PA_LOW

 <span class="k">************</span> Role Setup <span class="k">***********</span>
 Choose a role: Enter 0 <span class="k">for </span>pong_back, 1 <span class="k">for </span>ping_out <span class="o">(</span>CTRL+C to <span class="nb">exit</span><span class="o">)</span> 
 <span class="o">&gt;</span>1
 Role: Ping Out, starting transmission 

 Now sending...
 Got response 525939321, round-trip delay: 5
 Now sending...
 Got response 525940329, round-trip delay: 2
 Now sending...
 Got response 525941333, round-trip delay: 2
 Now sending...
 Got response 525942337, round-trip delay: 2</code></pre></figure>]]></content><author><name></name></author><category term="wireless" /><category term="sensor_node" /><category term="beaglebone" /><category term="nrf24l01" /><category term="linux" /><category term="electronics" /><summary type="html"><![CDATA[I am working on various electronics projects where I want to have a sensor node that collects data from a sensor and either logs it to a micro-SD-card directly or sens it wirelessly to another machine that uses/logs/etc the data. I opted for a set of NRF24L01+ boards for the wireless communication between the nodes and data loggers. So to test it out I want to communicate between my Beagle Bone Black and an Arduino. The NRF24 library by TMRh20 supplies a unified API for the NRF24L01 that should work on Arduino, linux (like Beagle Bone Black and Raspberry Pi) and other platforms. It also includes some examples that are identical across platforms so you can test between platforms with the same code. Really cool. I had trouble getting it to work on my Beagle Bone Black. This post hopefully will help other getting it to work on a Beagle Bone Black running Debian Jessy.]]></summary></entry><entry><title type="html">Business intelligence and data manipulation with Knime</title><link href="http://allican.be/blog/2016/10/26/business-intelligence-with-knime.html" rel="alternate" type="text/html" title="Business intelligence and data manipulation with Knime" /><published>2016-10-26T00:00:00+08:00</published><updated>2019-06-28T19:16:19+08:00</updated><id>http://allican.be/blog/2016/10/26/business-intelligence-with-knime</id><content type="html" xml:base="http://allican.be/blog/2016/10/26/business-intelligence-with-knime.html"><![CDATA[<p>It’s been a while since I did a proper post about something techy. But I did spend quite a bit of time with Knime, and I love it. So I think it warrants a post. <a href="https://www.knime.org/knime-analytics-platform">Knime</a> is a complete data mining, manipulation and analysis toolkit. It’s completely open-source and really flexible. I have experience with other <a href="https://en.wikipedia.org/wiki/Extract,_transform,_load">ETL</a> and reporting tools, like <a href="https://www.talend.com/products/talend-open-studio">Talend Open Studio</a>, <a href="http://community.jaspersoft.com/project/jaspersoft-studio">JasperReports</a> and <a href="http://www.pentaho.com/product/data-integration">Pentaho Kettle</a> but for me (in my use-case) Knime rises above them. Talking about my use case, what is it?</p>

<h2 id="use-case">Use Case</h2>
<p>At <a href="http://www.east-corp-philippines.com">the solar power company</a> that I am a partner in (among other activities) we sell inverters from various different brands. As a consequence, our clients use a variety of (web-based) monitoring tools. Each with their own dashboard and output. But we need overviews comparing all our clients with each-other, and besides that, we can get extra data from those inverters internally, which allows us to do advanced debugging and monitoring. But visualising that data from those different sources is non-trivial. This is where Knime comes in. We can download exports of the webbased monitoring dashboards that our clients use. Some of them produce csv files, others excel files, and the format of all those files is wildly different. Knime allows me to read in the data from those different files, combine it into one common dataset and then analyse that data. I used it for instance to create an interactive graph that plots the average daily solar array output per week for each of our clients (as a % of their maximum output) so I could compare the performance of each solar array.
Knime does it’s work this by creating a chain of “nodes” (operations) that are connected by arrows. Each node does somethings small, like calculate a number, filter rows, rename columns, etc. The data flows through the chain of operations from the start node to the end node.</p>

<ul>
  <li><img src="/images/knime_workflow.png" alt="My knime workflow combining data from multiple sources into one workflow for analysis and visualisation." /></li>
</ul>

<p>With the nodes you can do calculations, filtering, joining data, grouping, pivot tables, transposing, etc. It also has graphing tools, and an enormous amount of plugins that let you go into seriously complex modelling, genetics, bioinformatics, geo-information, etc. It allows you to read a whole directory of files, databases, allows you to download data/files automatically from the internet or webservices and interface with online API’s like google analytics and twitter. Most of this stuff I haven’t tried out though.</p>

<p>In the left of the image above you see a bunch of nodes with no input. Those are meta nodes. These allow you to embed whole separate workflow into another workflow. For each client for instance I have a workflow that reads the respective export files, combines them and transforms the data into data that is uniform across all clients. This way you can break complex workflows up into several separate ones. And if I ever need to read the data from one of those clients in another workflow, I just copy the meta-node over to the new workflow without having to redo any work.</p>

<h2 id="scripting">Scripting</h2>
<p>For me the cool part is that it also has a lot of scripting plugins for different languages. It integrates javascript, Groovy, Java, Python and R scripting interfaces at least. So you can create a small node that does something in python, or leverage the serious statistical power of R.
I for instance use the python scripting node to Date/Time manipulations and some other data corrections that I can quickly do in Python. But those nodes are really tiny and easy to maintain.</p>

<p>A larger python node that I created is for visualisation. Knime has quite a few graphing tools, from <a href="http://marcoghislanzoni.com/blog/2016/04/29/knime-3-charting-with-plotly-js/">javascript based ones which can use some awesome graphing libraries for webapplications like Plotly.js</a>, to it’s own internal graphing tool. But none of those were good enough for me. The performance of the javascript based ones was bad with large amounts of data (one of my workflows has a few 100.000 rows) while the internal one wasn’t interactive enough. I decided to go with Python’s <a href="http://matplotlib.org/">matplotlib</a> which is used a lot in the scientific community as is really good. Especially the <a href="http://matplotlib.org/users/pyplot_tutorial.html">Pyplot graphs</a>, which have an interactive interface are nice to use, enabling you to zoom in and out, switch data series on and off and save the resulting final graph as a png file.</p>

<ul>
  <li><img src="/images/knime-matplotlib-graph.png" alt="The resulting graph of using matplotlib in a Knime Python View node" /></li>
</ul>

<p>The below code does the matplotlib work. The code is commented and together with the <a href="http://matplotlib.org/users/pyplot_tutorial.html">pyplot docs</a> is quite understandable.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">matplotlib.gridspec</span> <span class="k">as</span> <span class="n">gridspec</span>
<span class="kn">import</span> <span class="nn">matplotlib</span> <span class="k">as</span> <span class="n">mpl</span>
<span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">cm</span>

<span class="c1">#set the matplotlib style, based on ggplot but slightly adjusted
</span><span class="n">mystyle</span> <span class="o">=</span> <span class="n">mpl</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">library</span><span class="p">[</span><span class="s">'ggplot'</span><span class="p">]</span>
<span class="n">mystyle</span><span class="p">[</span><span class="s">'lines.linewidth'</span><span class="p">]</span><span class="o">=</span> <span class="mf">1.6</span>
<span class="n">mpl</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">use</span><span class="p">(</span><span class="n">mystyle</span><span class="p">)</span>

<span class="c1">#create a gridspec where the graph will take up 5/6 of the grid
#and the legend the last bit
</span>
<span class="n">gs</span> <span class="o">=</span> <span class="n">gridspec</span><span class="p">.</span><span class="n">GridSpec</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">()</span>
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot</span><span class="p">(</span><span class="n">gs</span><span class="p">[:,</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'% of maximum output'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Time'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"Average daily output (% of max) per week"</span><span class="p">);</span>

<span class="n">x</span><span class="o">=</span><span class="n">input_table</span><span class="p">[</span><span class="s">'Date'</span><span class="p">]</span> <span class="c1"># a-axis
</span>
<span class="c1"># variables for the y-axes (data series)
</span><span class="n">line_cols</span> <span class="o">=</span> <span class="p">[</span><span class="n">c</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">input_table</span><span class="p">.</span><span class="n">keys</span><span class="p">()</span> <span class="k">if</span> <span class="n">c</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">(</span><span class="s">'Date'</span><span class="p">,</span><span class="s">'Year'</span><span class="p">,</span><span class="s">'Week'</span><span class="p">)]</span>

<span class="c1"># use viridis for coloring the data series
</span><span class="n">ax1</span><span class="p">.</span><span class="n">set_color_cycle</span><span class="p">([</span><span class="n">cm</span><span class="p">.</span><span class="n">viridis</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">1.1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">line_cols</span><span class="p">))])</span>

<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">line_cols</span><span class="p">:</span>
	<span class="c1">#plot the data series
</span>    <span class="n">ax1</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">input_table</span><span class="p">[</span><span class="n">col</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="n">col</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="s">'o'</span><span class="p">)</span>

<span class="c1">#setup the legendto the right of the plot
</span><span class="n">leg1</span> <span class="o">=</span> <span class="n">ax1</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s">'center left'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">bbox_to_anchor</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">),</span> <span class="n">ncol</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="c1">#Now some magic to allow clicking in the legend to switch data series on and off
</span><span class="n">lined</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">for</span> <span class="n">legline</span><span class="p">,</span> <span class="n">origline</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">leg1</span><span class="p">.</span><span class="n">get_lines</span><span class="p">(),</span> <span class="n">ax1</span><span class="p">.</span><span class="n">lines</span><span class="p">):</span>
    <span class="n">legline</span><span class="p">.</span><span class="n">set_picker</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
    <span class="n">lined</span><span class="p">[</span><span class="n">legline</span><span class="p">]</span><span class="o">=</span><span class="n">origline</span>

<span class="k">def</span> <span class="nf">onpick</span><span class="p">(</span><span class="n">event</span><span class="p">):</span>
    <span class="c1"># on the pick event, find the orig line corresponding to the
</span>    <span class="c1"># legend proxy line, and toggle the visibility
</span>    <span class="n">legline</span> <span class="o">=</span> <span class="n">event</span><span class="p">.</span><span class="n">artist</span>
    <span class="n">origline</span> <span class="o">=</span> <span class="n">lined</span><span class="p">[</span><span class="n">legline</span><span class="p">]</span>
    <span class="n">vis</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">origline</span><span class="p">.</span><span class="n">get_visible</span><span class="p">()</span>
    <span class="n">origline</span><span class="p">.</span><span class="n">set_visible</span><span class="p">(</span><span class="n">vis</span><span class="p">)</span>
    <span class="c1"># Change the alpha on the line in the legend so we can see what lines
</span>    <span class="c1"># have been toggled
</span>    <span class="k">if</span> <span class="n">vis</span><span class="p">:</span>
        <span class="n">legline</span><span class="p">.</span><span class="n">set_alpha</span><span class="p">(</span><span class="mf">1.0</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">legline</span><span class="p">.</span><span class="n">set_alpha</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
    <span class="n">ylim</span><span class="o">=</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span><span class="bp">None</span><span class="p">)</span>

    <span class="c1">#rescale the y-axis according to the currently active data series
</span>    <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">ax1</span><span class="p">.</span><span class="n">lines</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">l</span><span class="p">.</span><span class="n">get_visible</span><span class="p">():</span>
            <span class="k">continue</span>
        <span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="o">=</span> <span class="n">l</span><span class="p">.</span><span class="n">get_data</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">ylim</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">ylim</span><span class="o">=</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">y</span><span class="p">),</span><span class="nb">max</span><span class="p">(</span><span class="n">y</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">ylim</span><span class="o">=</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">ylim</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nb">min</span><span class="p">(</span><span class="n">y</span><span class="p">)),</span><span class="nb">max</span><span class="p">(</span><span class="n">ylim</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nb">max</span><span class="p">(</span><span class="n">y</span><span class="p">)))</span>
    <span class="n">ax1</span><span class="p">.</span><span class="n">set_ylim</span><span class="p">(</span><span class="n">ylim</span><span class="p">)</span>
        
    <span class="n">fig</span><span class="p">.</span><span class="n">canvas</span><span class="p">.</span><span class="n">draw</span><span class="p">()</span>

<span class="n">fig</span><span class="p">.</span><span class="n">canvas</span><span class="p">.</span><span class="n">mpl_connect</span><span class="p">(</span><span class="s">'pick_event'</span><span class="p">,</span> <span class="n">onpick</span><span class="p">)</span>


<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>

<span class="n">output_image</span> <span class="o">=</span> <span class="s">""</span></code></pre></figure>

<h2 id="conclusion">Conclusion</h2>
<p>Knime is really an end-to-end tool for people who need to work with homogenous data and load, transform and correct them before visualising and analysing the data. Although there is a bit of a learning curve to use Knime, it’s quite user friendly and anyone (without programming experience) will be able to learn to use it. The additional Python and R scripting possibilities and host of plugins take it beyond a simple ETL tool to a proper business intelligence and data analysis suite.</p>]]></content><author><name></name></author><category term="business_intelligence" /><category term="knime" /><category term="python" /><category term="matplotlib" /><category term="visualisation" /><category term="ETL" /><category term="data" /><summary type="html"><![CDATA[It’s been a while since I did a proper post about something techy. But I did spend quite a bit of time with Knime, and I love it. So I think it warrants a post. Knime is a complete data mining, manipulation and analysis toolkit. It’s completely open-source and really flexible. I have experience with other ETL and reporting tools, like Talend Open Studio, JasperReports and Pentaho Kettle but for me (in my use-case) Knime rises above them. Talking about my use case, what is it?]]></summary></entry><entry><title type="html">Tragedy in the Amazon</title><link href="http://allican.be/blog/2016/09/13/tragedy-in-the-amazon.html" rel="alternate" type="text/html" title="Tragedy in the Amazon" /><published>2016-09-13T00:00:00+08:00</published><updated>2019-06-28T19:16:19+08:00</updated><id>http://allican.be/blog/2016/09/13/tragedy-in-the-amazon</id><content type="html" xml:base="http://allican.be/blog/2016/09/13/tragedy-in-the-amazon.html"><![CDATA[<p><a href="https://www.change.org/p/president-of-bolivia-evo-morales-let-s-protect-the-madidi-national-park-and-amazon-forest?recruiter=596205683"><img src="/images/beni_dam_banner.jpg" alt="Help save Madidi and Pilón Lajas" /></a>
The Tambopata-Madidi area on the foothills of the Andes is one if the last areas of Amazonian forest that is relatively untouched by man. It contains 42000km2 of national parks, ranging from Tambopata in Peru to Madidi and Pilón Lajas in Bolivia. It is home to two important tributaries of the Amazon river and an incredible biodiversity with both montane and lowland tropical forest, harbouring over 10% of the world’s bird species, and possibly the most biodiverse place in the world. Around 15000-30000 people divided among three different indigenous peoples call it their home, with an interesting cultural diversity, bridging the Highland people for which Peru and Bolivia are famous to the lowland Amazonian tribes.</p>

<p>As a gateway to this biological and cultural diversity, Rurrenabaque in Bolivia has attracted many visitors from all over the world for many years and has been a thriving eco-tourism destination with around 30000 tourists visiting the area in 2005 alone.
Now, all this is threatened in the name of “progress”. A badly planned bridge over the Rio Beni followed by a large road through the park and other short-sighted economical developments have already had a negative impact on the tourism in the area, but now president Evo Morales is planing to build two hydroelectric dams in the river Beni, two giant artificial lakes which will inundate around 2000km2, including substantial parts of the Madidi and Pilón Lajas national parks. But besides inundating primary forest and killing an enormous diversity of flora and fauna, giant dams like this have much wider ranging ecological impacts. The dams, cutting off one of the muddiest tributaries to the Amazon, will also prevent nutrients and minerals to be transported downstream, not only causing large ecological impacts on the remaining forests in Brazil but also causing eutrophication of the lake with bad water quality, low biodiversity and a breeding ground for parasites as consequences. The dams further downstream in Brazil have also proven to Bolivia that these mega dams elevate the risk of flooding upstream caused by el niño/la niña and influence migratory behaviour of fish along the whole Amazon River. And of course such a massive deforestation will have an impact on both the local climate and will be another nail in the coffin of human induced climate change.</p>

<p>Also from an economical standpoint these lakes are questionable. The electricity is generated purely to sell to Brazil. Their places with high demand are on the other side of Bolivia, incurring high transportation costs. And a market with only one buyer for your product allows the buyer to push the price down. This has happened before in Paraguay where Brazil buys electricity from a giant hydroelectric dam below cost price. The returns on investment are therefore very likely much worse than projected by the government. For this reason a number hydroelectric projects in neighbouring countries have been canceled.
And even when accepting the expected income, looking at the sheer size of the lake (which multiple examples have shown is usually grossly underestimated initially) in comparison with the projected income from the electricity, it is a bad use of the surface area. Besides there being viable smaller scale hydroelectric alternatives, many alternative low-cost and sustainable sources of income have already been realised and can be expanded upon. The thriving eco-tourism in the area and the examples of sustainable agriculture projects are just two examples. The lakes will irreversibly destroy the eco-tourism and agricultural activities. With Rurrenabaque being one of the two major tourism destinations in Bolivia, the economical consequences will be wide ranging and not only limited to Rurrenabaque.</p>

<p>Another tragedy is the cultural impact. Multiple indigenous people (Tsimane, Mosetén and Tacana), some of which still live in isolation in their traditional culture by choice, will loose their territory, livelihood and homes. This is not only a tragedy but even illegal under Bolivian law, where indigenous tribes have a high level of autonomy over their territory. Due to the geology of the land, the indigenous people live in sparsely populated but relatively small areas. A relocation will force a complete people to live in exile and quickly loose their culture.</p>

<p>These cultural, ecological and economical tragedies can and should be prevented. Foreigners can’t do much to convince the president of Bolivia, but I hope that with enough interest and attention abroad, enough Bolivian people will realise that this project is an all round bad idea and will listen to their countrymen and -women who are working hard and not without danger, to convince their politicians. If you want to help, <a href="https://www.change.org/p/president-of-bolivia-evo-morales-let-s-protect-the-madidi-national-park-and-amazon-forest?recruiter=596205683">please sign the petition</a> and spread the word on Facebook or in any other way you can. A great group where many Bolivian people who want to stop the project are a member of <a href="https://www.facebook.com/groups/280638448985438/">can be found on Facebook</a>.</p>

<p>Sources:</p>

<ul>
  <li><a href="">https://bolivia.wcs.org/en-us/Landscapes/Madidi-Tambopata.aspx</a></li>
  <li><a href="">http://drobisonbolivia.blogspot.com/2016/09/represas-en-el-bala-y-chepete-pura.html?spref=fb&amp;m=1</a></li>
  <li><a href="">https://es.scribd.com/mobile/document/274405657/EL-BALA-LA-GRAN-DEVASTACION-EN-LA-AMAZONIA-BOLIVIANA</a></li>
  <li><a href="">http://porlatierra.org/novedades/post/127</a></li>
  <li><a href="">http://www.lostiempos.com/tendencias/interesante/20160814/crisis-rurrenabaque-pesadilla-china</a></li>
  <li><a href="">http://tur.sb-10.org/doc/6649/index.html</a></li>
  <li><a href="">http://dice.missouri.edu/docs/south-america-other/Tacana.pdf</a></li>
  <li><a href="">http://dice.missouri.edu/docs/south-america-other/Tacana_2.pdf</a></li>
  <li><a href="">http://dice.missouri.edu/docs/south-america-other/Tsimane.pdf</a></li>
</ul>]]></content><author><name></name></author><category term="Amazon" /><category term="Bolivia" /><category term="Conservation" /><category term="deforestation" /><category term="hydroelectric" /><category term="dam" /><summary type="html"><![CDATA[The Tambopata-Madidi area on the foothills of the Andes is one if the last areas of Amazonian forest that is relatively untouched by man. It contains 42000km2 of national parks, ranging from Tambopata in Peru to Madidi and Pilón Lajas in Bolivia. It is home to two important tributaries of the Amazon river and an incredible biodiversity with both montane and lowland tropical forest, harbouring over 10% of the world’s bird species, and possibly the most biodiverse place in the world. Around 15000-30000 people divided among three different indigenous peoples call it their home, with an interesting cultural diversity, bridging the Highland people for which Peru and Bolivia are famous to the lowland Amazonian tribes.]]></summary></entry><entry><title type="html">Reinstalling the kernel on Arch Linux after a failed upgrade.</title><link href="http://allican.be/blog/2016/06/09/arch-reinstalling-kernel-after-failed-upgrade.html" rel="alternate" type="text/html" title="Reinstalling the kernel on Arch Linux after a failed upgrade." /><published>2016-06-09T00:00:00+08:00</published><updated>2019-06-28T19:16:19+08:00</updated><id>http://allican.be/blog/2016/06/09/arch-reinstalling-kernel-after-failed-upgrade</id><content type="html" xml:base="http://allican.be/blog/2016/06/09/arch-reinstalling-kernel-after-failed-upgrade.html"><![CDATA[<p>Since a few weeks my laptop battery is dead. I am still trying to work with Asus to get a new one as it is still under warranty (but sending it in for repair will apparently take 2 months while I already know that a new battery will solve the problem). So I am working of the net power only. The power sockets in the Philippines aren’t great though, and Asus decided to integrate the plug into the transformer/regulator unit for my laptop charger, creating a big heavy plug that is really too heavy for vertical wall sockets. So as you can guess from the title of this blog post, yesterday I was working on my laptop and decided to install upgrades on my Arch Linux box. While I was doing this though, I accidentally touched the power cord of my laptop, which then fell out of the wall socket. This isn’t the first time this happened, but unfortunately my computer was in the middle of a kernel upgrade…. And of course the kernel modules weren’t fully installed, and the initramfs wasn’t fully updated either.</p>

<p>So when I started my laptop again, it dropped me into the emergency mode. After looking at the logs with <code class="language-plaintext highlighter-rouge">journalctl -xe</code> and going almost all the way to the top of the logs, I found these error messages:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">systemd[1]: Starting Load Kernel Modules...
systemd[1]: systemd-modules-load.service: Main process exited, <span class="nv">code</span><span class="o">=</span>exited, <span class="nv">status</span><span class="o">=</span>1
systemd[1]: Failed to start Load Kernel Modules.
systemd[1]: systemd-modules-load.service: Unit entered failed state.
systemd[1]: systemd-modules-load.service: Failed with result <span class="s1">'exit-code'</span><span class="nb">.</span>
systemd-modules-load[173]: Failed to lookup <span class="nb">alias</span> <span class="s1">'loop'</span>: Function not implemented
systemd-modules-load[173]: Failed to lookup <span class="nb">alias</span> <span class="s1">'vboxdrv'</span>: Function not implemented
systemd-modules-load[173]: Failed to lookup <span class="nb">alias</span> <span class="s1">'vboxpci'</span>: Function not implemented
systemd-modules-load[173]: Failed to lookup <span class="nb">alias</span> <span class="s1">'vboxnetadp'</span>: Function not implemented
systemd-modules-load[173]: Failed to lookup <span class="nb">alias</span> <span class="s1">'vboxnetflt'</span>: Function not implemented</code></pre></figure>

<p>And a little further down:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">systemd[1]: Mounting /boot/efi...
mount[336]: mount: unknown filesystem <span class="nb">type</span> <span class="s1">'vfat'</span>
systemd[1]: boot-efi.mount: Mount process exited, <span class="nv">code</span><span class="o">=</span>exited <span class="nv">status</span><span class="o">=</span>32
systemd[1]: Failed to mount /boot/efi.
systemd[1]: Dependency failed <span class="k">for </span>Local File Systems.
systemd[1]: local-fs.target: Job local-fs.target/start failed with result <span class="s1">'dependency'</span><span class="nb">.</span>
systemd[1]: local-fs.target: Triggering <span class="nv">OnFailure</span><span class="o">=</span> dependencies.
systemd[1]: boot-efi.mount: Unit entered failed state.</code></pre></figure>

<p>So there was clearly something wrong with my kernel modules, causing them not to load. Fortunately I still had my <a href="/blog/2016/02/04/creating_custom_persistent_arch_live_iso.html">custom persistent arch iso live USB stick</a>. With this, the solution was quite easy:</p>

<p>I booted my laptop from the usb stick. Once in the live cd, I <a href="https://wiki.archlinux.org/index.php/netctl#Wireless_.28WPA-PSK.29">setup the network with netctl</a>. Once I had network, I mounted my the partition with my OS’s root filesystem with <code class="language-plaintext highlighter-rouge">mount /dev/sda8 /mnt</code> and chrooted into it with <code class="language-plaintext highlighter-rouge">arch-chroot /mnt /bin/bash</code>. Now I was back in my normal OS. All I had to do now was reinstall the kernel and modules. I did <code class="language-plaintext highlighter-rouge">pacman -S --force linux linux-headers mkinitcpio kmod</code>. The <code class="language-plaintext highlighter-rouge">--force</code> in there makes sure everything gets reinstalled even if files from the package already exist in the filesystem. With me this was necessary since the same kernel and modules were already partially installed. It also re-built the initramfs and installed it. After this was done and a reboot, my os was up and running again. Phew! Thank heavens for the live USB stick.</p>

<p>The last thing I needed to do is check which other packages might need to be reinstalled. If you have yaourt installed, you can show your installed packages, sorted by installation date with <code class="language-plaintext highlighter-rouge">yaourt -Q --date</code>. The packages at the bottom are the ones that were installed last. I just guessed from there which were the packages that might be corrupt, and reinstalled them the same way as the linux/linux-headers/etc pacakges. I also got an error when installing them about nvidia modules (I am running bumblebee and bbswitch was one of the likely incompletely installed packages) and therefore decided to reinstal all those packages (nvidia, nvidia-utils, bumblebee, opencl-nvidia, lib32-nvidia-utils, bbswitch) as well. After this all errors were gone.</p>]]></content><author><name></name></author><category term="ArchLinux" /><category term="live" /><category term="kernel" /><category term="upgrade" /><category term="modules" /><summary type="html"><![CDATA[Since a few weeks my laptop battery is dead. I am still trying to work with Asus to get a new one as it is still under warranty (but sending it in for repair will apparently take 2 months while I already know that a new battery will solve the problem). So I am working of the net power only. The power sockets in the Philippines aren’t great though, and Asus decided to integrate the plug into the transformer/regulator unit for my laptop charger, creating a big heavy plug that is really too heavy for vertical wall sockets. So as you can guess from the title of this blog post, yesterday I was working on my laptop and decided to install upgrades on my Arch Linux box. While I was doing this though, I accidentally touched the power cord of my laptop, which then fell out of the wall socket. This isn’t the first time this happened, but unfortunately my computer was in the middle of a kernel upgrade…. And of course the kernel modules weren’t fully installed, and the initramfs wasn’t fully updated either.]]></summary></entry><entry><title type="html">Setting up a chinese IP camera without manual</title><link href="http://allican.be/blog/2016/05/13/finding-chinese-ip-cam.html" rel="alternate" type="text/html" title="Setting up a chinese IP camera without manual" /><published>2016-05-13T00:00:00+08:00</published><updated>2019-06-28T19:16:19+08:00</updated><id>http://allican.be/blog/2016/05/13/finding-chinese-ip-cam</id><content type="html" xml:base="http://allican.be/blog/2016/05/13/finding-chinese-ip-cam.html"><![CDATA[<p>This post is probably a no-brainer for quite a lot of people. And it should have been for me too. I don’t know if my brain was just not working from the dry and hot el niño weather, but it took me quite a while to figure this out. Since chances are there are others with the same problem, I thought it’d be worth to write it up.</p>

<p>My boss bought a few IP-camera’s on Ali-Express together with a recorder to monitor some areas with expensive equipment. I won’t go into <a href="https://www.youtube.com/watch?v=B8DjTcANBx0">the security of these types of camera’s</a> here. And of course the cheap stuff from Ali-Express comes in an unmarked box without any manuals. There’s also no brand to be found on the camera. Normally it is a matter of pride to not need manuals. But the problem with IP camera’s is that you need to know their network settings somehow. That is where I ran into trouble.</p>

<p>The camera’s have both a wired and wireless connection available. I was hoping the camera would be set to dynamic IP, so it would pickup an IP address from the DHCP server on my router, and I could see it in the router status page when I connected it with a wire. No such luck though. The next thing I tried was setup a DHCP server on my laptop. It’s pretty straightforward to install dnsmasq, and the only settings you need to adjust are the interfaces directive (make sure it’s not running on your wifi interface and mess up the wifi) and DHCP-range directive. And you need to set a static IP in the same sub-net for your wired network card. I’m not going into the details for this, but suffice it to say this didn’t work either. So clearly the IP-camera wasn’t set for a dynamic IP. I tried a few of the simple IP addresses like 192.168.0.2 192.168.1.2, etc but none worked. I was ready to give up what my brain finally kicked into gear: <a href="https://www.wireshark.org/">wireshark</a>.</p>

<p>I have used wireshark plenty of times before to analyse network traffic. It is an awesome tool. It allows you to see all network traffic passing through your network interfaces. I did see the light on the wired network interface of the camera blinking, so I knew it was trying to communicate through the network. So I connected the camera with a cable straight into the network card of my laptop. I ran wireshark on that network interface and looked at the traffic coming by. Very quickly I noticed <a href="https://en.wikipedia.org/wiki/Address_Resolution_Protocol">ARP-packets</a> where an IP-address 192.168.1.136 was <a href="https://ask.wireshark.org/questions/5412/what-does-arp-42-who-has-19216811-tell-192168133-mean">asking who has</a> 192.168.1.1. This means that there is a device with IP-address 192.168.1.136 who is looking to contact IP-address 192.168.1.1. Chances are that this is the camera looking for a router to contact the internet. Indeed the camera’s turned out to be configured with NTP enabled to sync it’s hardware clock with a server on the internet, and it was trying to get on the internet. 
So now I knew the IP-address of the camera was 192.168.1.136. From that point onward it was straightforward again. Just set a static IP (192.168.1.2) on my laptop wired network interface, have a cable between the camera and the laptop, and I could access the web-interface of the camera on http://192.168.1.136.</p>

<p>Configuring could finally commence. It took me way to long to realize to get wireshark. It was pretty easy once I remembered.</p>]]></content><author><name></name></author><category term="networking" /><category term="wireshark" /><category term="IP-camera" /><category term="IP-address" /><summary type="html"><![CDATA[This post is probably a no-brainer for quite a lot of people. And it should have been for me too. I don’t know if my brain was just not working from the dry and hot el niño weather, but it took me quite a while to figure this out. Since chances are there are others with the same problem, I thought it’d be worth to write it up.]]></summary></entry></feed>