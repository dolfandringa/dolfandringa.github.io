<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://allican.be/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="http://allican.be/feed.xml" rel="self" type="application/atom+xml" /><link href="http://allican.be/" rel="alternate" type="text/html" /><updated>2017-01-16T14:17:09+08:00</updated><id>http://allican.be/</id><title type="html">All I can be - A weblog by Dolf Andringa</title><subtitle>This site is my personal showcase and outlet about what keeps me off the streets. It will mostly be about hacking, programming, GNU/Linux, but also about ecology, travel and science. I am a weird combination of an ecologist, hacker and ideologist.
</subtitle><entry><title type="html">Drawing images and interactively change text on a canvas using Angular JS.</title><link href="http://allican.be/blog/2017/01/16/drawing-images-and-changing-text-on-a-canvas-with-angular.html" rel="alternate" type="text/html" title="Drawing images and interactively change text on a canvas using Angular JS." /><published>2017-01-16T00:00:00+08:00</published><updated>2017-01-16T14:16:19+08:00</updated><id>http://allican.be/blog/2017/01/16/drawing-images-and-changing-text-on-a-canvas-with-angular</id><content type="html" xml:base="http://allican.be/blog/2017/01/16/drawing-images-and-changing-text-on-a-canvas-with-angular.html">&lt;p&gt;So I love &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; (or Angular as &lt;a href=&quot;https://www.infoq.com/news/2016/12/angular-4&quot;&gt;you’re supposed to call it now&lt;/a&gt;) for creating the interfaces of web-applications. I have really started to decouple the interfaces I make from the backend, by using Angular for the front-end and &lt;a href=&quot;http://flask.pocoo.org&quot;&gt;flask&lt;/a&gt; to create a RESTful backend with which Angular communicates. It’s awesome. Right now I am making a web-interface that draws an image and dynamically changes numbers in that image depending on data it fetches from the backend. It is used in this case to show an image of a Solar Power system and dynamically change numbers in the image, showing the current state (battery capacity, panel output, power consumption, etc) of their system. I am using Angular for this and the &lt;a href=&quot;http://www.w3schools.com/html/html5_canvas.asp&quot;&gt;HTML5 Canvas&lt;/a&gt; object.&lt;/p&gt;

&lt;p&gt;What I’m trying to do is load a static png image in the canvas, and draw text in that canvas as well that is stored in the scope of the controller. This is why I like Angular. You just define a variable in your controller, and whenever that value changes in the controller, automatically the web-interface changes according to the changing data. No complicated event handling necessary (well, Angular does that for you). This is a screenshot of the finished version of what I was trying to do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;/images/solar_state_canvas_angular.png&quot; alt=&quot;Dynamically changing text in solar system image&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the numbers in the drawing change dynamically with changing data from a web-service, but are located within the canvas that the png image is in too, so there is not html/css positioning nightmare.&lt;/p&gt;

&lt;p&gt;When writing this interface, I ran into a number of problems that I thought would be useful to share the solution about. All of my solutions were the result of Google magic, especially due to &lt;a href=&quot;http://stackoverflow.com&quot;&gt;StackOverflow&lt;/a&gt;, so major credit really goes to the community, and be sure to hone your google skills before asking others to help you.&lt;/p&gt;

&lt;p&gt;Before I go over the specific problems I had and how I solved them, here is a complete working example, including comments, of the final solutions that I came up with. The result isn’t particularly beautiful because I wanted to keep the code and markup to a minimum as not to obfuscate the core. If you are looking into making a nice looking interface with angular, I suggest you look at &lt;a href=&quot;https://material.angularjs.org/&quot;&gt;Angular Material&lt;/a&gt;.&lt;/p&gt;

&lt;p data-height=&quot;477&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;EZgyXv&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;dolfandringa&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Drawing an image on a canvas with Angular&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/dolfandringa/pen/EZgyXv/&quot;&gt;Drawing an image on a canvas with Angular&lt;/a&gt; by Dolf Andringa (&lt;a href=&quot;http://codepen.io/dolfandringa&quot;&gt;@dolfandringa&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The code creates a custom &lt;a href=&quot;https://docs.angularjs.org/guide/directive&quot;&gt;angular directive&lt;/a&gt; (called stateGraph/state-graph) that can be set as an attribute on a canvas tag. When you do, angular kicks in and handles the canvas. The angular code creates an additional attribute for the canvas tag called “numbers” where you set the variable (an object in this case) that contains the data that should be drawn (and updated) in the canvas. The stateGraph directive uses an isolated scope for this. This means that the scope inside the stateGraph directive is not the same scope as the scope of the controller. Instead, the “numbers” attribute of the canvas tag is where the variable from the controller ($scope.ctrlnumbers) is assigned to the scope of the directive (scope.numbers). This way, the controller can change the $scope.ctrlnumbers on the scope, and those same numbers are watched by the directive scope.numbers, which updates the canvas when they change.&lt;/p&gt;

&lt;p&gt;Ok, so this way I can create a function (now just a function that is triggered by a timeout and adds/multiplies numbers, but this can be changed to something that fetches values from a web-service) inside the controller that changes numbers, and the canvas directive is changed when those numbers change. The problem I still had (which is canvas related, not angular related) is how to &lt;em&gt;change&lt;/em&gt; text in the canvas instead of just adding numbers on top of each other. The canvas object doesn’t have any concept of variables. I is just a piece of digital paper on which you can draw and erase. And there lies the trick. To change text, you need to erase the old text and then add new text. This is what the drawNumber function does. It first clips the canvas to the circle where the text is. This ensure that everything that is done in the canvas from that point on, only affects the clipped area. I then do a clearRect() for clear the area where the text is. As the canvas is clipped, this will only erase whatever is in the clipped area, nothing outside. Then I restore the canvas (undo the clipping) and set the new text in the canvas.&lt;/p&gt;

&lt;p&gt;The last thing I want to explain is how I fixed that my png image wasn’t actually showing up on my canvas. I could see in the “Network” tab of the developer tools of my browser that the image was loading, it just didn’t show up. The trick was to first create an onload function for the image object in which the image is drawn on the canvas, and only then set the src attribute. That way, the image starts loading as soon as you set the src attribute for it, and when it finishes, the onload method is called, which puts it on the canvas.&lt;/p&gt;

&lt;p&gt;I hope this code and explanation helps someone out there with some mad google skills.&lt;/p&gt;</content><category term="blog" /><category term="angularjs" /><category term="web-application" /><category term="website" /><category term="development" /><category term="canvas" /><category term="html5" /><summary type="html">So I love AngularJS (or Angular as you’re supposed to call it now) for creating the interfaces of web-applications. I have really started to decouple the interfaces I make from the backend, by using Angular for the front-end and flask to create a RESTful backend with which Angular communicates. It’s awesome. Right now I am making a web-interface that draws an image and dynamically changes numbers in that image depending on data it fetches from the backend. It is used in this case to show an image of a Solar Power system and dynamically change numbers in the image, showing the current state (battery capacity, panel output, power consumption, etc) of their system. I am using Angular for this and the HTML5 Canvas object.</summary></entry><entry><title type="html">Creating dummy serial ports in pure python.</title><link href="http://allican.be/blog/2017/01/15/python-dummy-serial-port.html" rel="alternate" type="text/html" title="Creating dummy serial ports in pure python." /><published>2017-01-15T00:00:00+08:00</published><updated>2017-01-16T00:03:35+08:00</updated><id>http://allican.be/blog/2017/01/15/python-dummy-serial-port</id><content type="html" xml:base="http://allican.be/blog/2017/01/15/python-dummy-serial-port.html">&lt;p&gt;Recently I needed to reverse-engineer the serial communication between a solar inverter and a computer. Although hardware manufactures may often be good at making the hardware they sell, their accompanying software often leaves a lot to be desired. To develop my own software, I needed to interface with a specific inverter, both to intercept the serial communication at first, but later to write my own software. In order to be able to write unittests for the serial port, and to test my software without actually being connected to an inverter, I wanted to have a dummy serial port on my computer that listens for any connections to the port and responds whatever I tell it to.&lt;/p&gt;

&lt;p&gt;Many &lt;a href=&quot;http://stackoverflow.com/questions/15173614/how-can-i-use-a-pseudoterminal-in-python-to-emulate-a-serial-port&quot;&gt;questions have been asked on stackoverflow&lt;/a&gt; about this (including by me), and an often recurring answer seems to be using software like socat for this. Socat definitely works well for communicating with serial ports, dumping data from serial ports to files, etc. I needed to also write tests for a piece of software that I was writing in python. Again, Mock protocols can be used for this and are often the best solution, but I was stubborn and wanted to figure out how to setup a dummy serial port that other software can communicate with.&lt;/p&gt;

&lt;p&gt;The trick is to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Pseudoterminal&quot;&gt;pseudoterminals&lt;/a&gt; in Linux. Pseudoterminals can be used (and are used) for many things, but serial communication can be one. Basically it is just a file that software can write to or read from as if it was a serial connection. Pseudoterminals work with a master and slave. One end is the master, which in my case is where my “dummy serial device” is listening. The slave side is the code/software I wanted to test. The master is usually /dev/ptmx on linux, while the slave is often of the form /dev/pts/&amp;lt;x&amp;gt; where x is any integer. The master endpoint is constant, even with multiple psuedoterminal connections, the master endpoint doesn’t change. The slave endpoints do have one for each psuedoterminal.&lt;/p&gt;

&lt;p&gt;This is where the trick was that I ran in to. Python has a &lt;a href=&quot;https://docs.python.org/3/library/pty.html&quot;&gt;pty module&lt;/a&gt; that you can use to setup this master and slave pair. The &lt;a href=&quot;https://docs.python.org/3/library/pty.html#pty.openpty&quot;&gt;pty.openpty()&lt;/a&gt; function returns two file descriptors, one for the master and one for the slave. These file descriptors already are opened and can be read from with &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.read&quot;&gt;os.read&lt;/a&gt; or written to with &lt;a href=&quot;os.write&quot;&gt;os.write&lt;/a&gt;. They are not filenames but file descriptors. With &lt;a href=&quot;https://docs.python.org/3/library/os.html#os.ttyname&quot;&gt;os.ttyname&lt;/a&gt; you can retrieve the actual filename of those file descriptors. But if you create a new file object for the master endpoint, you actually create a new file descriptor and instead of using the already opened connection to the slave, a new pseudoterminal (slave) will be created, with a new connection to the master. So while you can re-open the slave multiple times with different file descriptors and keep using the same connection to the master, you can’t open multiple file descriptors to the master that connect to the same slave.&lt;/p&gt;

&lt;p&gt;So to show some code with comments:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pty&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;serial&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;threading&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#continuously listen to commands on the master device&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;#keep reading one byte at a time until we have a full line&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;command: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;#write back the response&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'QPGS&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;correct result&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I dont understand&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Start the testing&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slave&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#open the pseudoterminal&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttyname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#translate the slave fd to a filename&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#create a separate thread that listens on the master device for commands&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#open a pySerial connection to the slave&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#write the first command&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#read the response&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;result: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'QPGS&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#write a second command&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#read the response&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;result: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;test_serial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This script has a listener function in a separate thread constantly listening on the master side for commands and responding accordingly. The test_serial function first starts the listener thread and then uses &lt;a href=&quot;https://pythonhosted.org/pyserial/&quot;&gt;pySerial&lt;/a&gt; to open a serial connection to the slave. It sends a command and reads the response. And then repeats it with a different command.&lt;/p&gt;

&lt;p&gt;I hope this clarifies how to use psuedoterminals for dummy serial connections in python.&lt;/p&gt;</content><category term="blog" /><category term="python" /><category term="pyserial" /><category term="solar" /><category term="pseudoterminal" /><summary type="html">Recently I needed to reverse-engineer the serial communication between a solar inverter and a computer. Although hardware manufactures may often be good at making the hardware they sell, their accompanying software often leaves a lot to be desired. To develop my own software, I needed to interface with a specific inverter, both to intercept the serial communication at first, but later to write my own software. In order to be able to write unittests for the serial port, and to test my software without actually being connected to an inverter, I wanted to have a dummy serial port on my computer that listens for any connections to the port and responds whatever I tell it to.</summary></entry><entry><title type="html">NRF24L01 and SPIDEV on the Beagle Bone Black</title><link href="http://allican.be/blog/2016/11/01/nrf24l01-beaglebone-black.html" rel="alternate" type="text/html" title="NRF24L01 and SPIDEV on the Beagle Bone Black" /><published>2016-11-01T00:00:00+08:00</published><updated>2016-11-01T18:08:36+08:00</updated><id>http://allican.be/blog/2016/11/01/nrf24l01-beaglebone-black</id><content type="html" xml:base="http://allican.be/blog/2016/11/01/nrf24l01-beaglebone-black.html">&lt;p&gt;I am working on various electronics projects where I want to have a sensor node that collects data from a sensor and either logs it to a micro-SD-card directly or sens it wirelessly to another machine that uses/logs/etc the data. I opted for a set of &lt;a href=&quot;http://www.nordicsemi.com/eng/Products/2.4GHz-RF/nRF24L01&quot;&gt;NRF24L01+&lt;/a&gt; boards for the wireless communication between the nodes and data loggers. So to test it out I want to communicate between my &lt;a href=&quot;http://www.nordicsemi.com/eng/Products/2.4GHz-RF/nRF24L01&quot;&gt;Beagle Bone Black&lt;/a&gt; and an &lt;a href=&quot;https://www.arduino.cc/&quot;&gt;Arduino&lt;/a&gt;. The &lt;a href=&quot;https://www.arduino.cc/&quot;&gt;NRF24 library by TMRh20&lt;/a&gt; supplies a unified API for the NRF24L01 that should work on Arduino, linux (like Beagle Bone Black and Raspberry Pi) and other platforms. It also includes some examples that are identical across platforms so you can test between platforms with the same code. Really cool. I had trouble getting it to work on my Beagle Bone Black. This post hopefully will help other getting it to work on a Beagle Bone Black running Debian Jessy.&lt;/p&gt;

&lt;p&gt;There are various howto’s about the Beagle Bone Black and RF24, and as so often with the BBB, there are many articles contradicting eachother, using different pinouts than my BBB uses I guess. What I have found is that the only reliable pinout for a BBB is the one specified on the standard webinterface of your BBB (on the front-page at the bottom). So the only really useful how-to I ended up using is about the RF24 library on [https://tmrh20.github.io/RF24/Linux.html], which doesn’t talk about the BBB specifically. So after installing the RF24 library I just tried what some other how-to’s said but as soon as I started the “gettingstarted” example from there, I got the error&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;RF24/examples/GettingStarted/
can&lt;span class=&quot;s1&quot;&gt;'t open device: No such file or directory
Aborted&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It took me quite a while to figure out what was going wrong. It turned out to be various problems, mostly related to the SPI bus and it’s pinout.&lt;/p&gt;

&lt;p&gt;The NRF24L01 uses the SPI bus for communication. The Beagle Bone Black uses SPIDEV for this and has two SPI buses. Those need to be enabled, and for them (or I believe actually only 1 of the 2) to work, the HDMI bus needs to be disabled. What I had to do was first edit &lt;code class=&quot;highlighter-rouge&quot;&gt;/bootuEnv.txt&lt;/code&gt; and make sure the following two lines were in there:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;cape_disable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bone_capemgr.disable_partno&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;BB-BONELT-HDMI,BB-BONELT-HDMIN
&lt;span class=&quot;nv&quot;&gt;cape_enable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bone_capemgr.enable_partno&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;BB-SPIDEV0,BB-SPIDEV1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After that you need to restart your beaglebone. With&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ls /dev/spi&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
/dev/spidev1.0  /dev/spidev1.1  /dev/spidev2.0  /dev/spidev2.1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;you can see the devices are there.
You can also see they are available with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# cat /sys/devices/platform/bone_capemgr/slots &lt;/span&gt;
0: PF----  -1 
1: PF----  -1 
2: PF----  -1 
3: PF----  -1 
4: P-O-L-   0 Override Board Name,00A0,Override Manuf,BB-SPIDEV0
5: P-O-L-   1 Override Board Name,00A0,Override Manuf,BB-SPIDEV1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;BB-SPIDEV0 I think corresponds to /dev/spidev1* and BB-SPIDEV1 to /dev/spidev2*. in the filesystem. If you look at the pinout for my Beagle Bone Black (but be sure to check yours on the web-interface of yours) specifies the following pinouts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;/images/bbb_spi_pinout.png&quot; alt=&quot;Beagle Bone Black SPI pinout&quot; /&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There, the pins SPI1_DO, SPI1_D1, SPI1_CSO and SPI1_SCLK correspond to BB-SPIDEV1 and /dev/spidev2*. So I wired my NRF24L01+ in the following way:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Beagle Bone&lt;/th&gt;
      &lt;th&gt;NRF pin name&lt;/th&gt;
      &lt;th&gt;NRF pin number&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;DGND&lt;/td&gt;
      &lt;td&gt;GND&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;VDD3V3&lt;/td&gt;
      &lt;td&gt;VCC&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GPIO_115&lt;/td&gt;
      &lt;td&gt;CE&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SPI1_CSO&lt;/td&gt;
      &lt;td&gt;CSN&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SPI1_D0&lt;/td&gt;
      &lt;td&gt;MOSI&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SPI1_D1&lt;/td&gt;
      &lt;td&gt;MISO&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SPI1_SCLK&lt;/td&gt;
      &lt;td&gt;SCLK&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;After having it wired like this I wanted to get the gettingstarted sample in &lt;em&gt;~/rf24libs/RF24/examples_linux/gettingstarted.cpp&lt;/em&gt; to work. The problem I had there is that the RF24 radio() statement in there, which instantiates the RF24 radio is different on Linux than it is on Arduino. On Arduino you give the radio() function the pin numbers to which the CE and CSN pins of the NRF24 are connected. With the Beagle Bone Black and SPIDEV the first argument is the pin number of the CE pin, while the second argument is the number of the SPI device that it is connected to. If you connected it as I showed above, the CE pin is connected to pin GPIO_115 (pin 27 of header P9) and you’re using SPI1. So the line with RF12 radio() in &lt;em&gt;~/rf24libs/RF24/examples_linux/gettingstarted.cpp&lt;/em&gt; should look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;RF24&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The first argument specifies the CE pin is GPIO_115 while the second says that it uses SPI1, or in other words &lt;em&gt;/dev/spidev2.0&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After that you need to run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;make gettingstarted&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;in the &lt;em&gt;~/rf24libs/RF24/examples_linux&lt;/em&gt; directory to compile it.
After that, the example works (provided you have another device, like an Arduino, with an NRF24L01 listening to pong back):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# ./gettingstarted&lt;/span&gt;
RF24/examples/GettingStarted/
STATUS       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x0e &lt;span class=&quot;nv&quot;&gt;RX_DR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;TX_DS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;MAX_RT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;RX_P_NO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;7 &lt;span class=&quot;nv&quot;&gt;TX_FULL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
RX_ADDR_P0-1     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x65646f4e34 0x65646f4e33
RX_ADDR_P2-5     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0xc3 0xc4 0xc5 0xc6
TX_ADDR      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x65646f4e34
RX_PW_P0-6   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x20 0x20 0x00 0x00 0x00 0x00
EN_AA        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x3f
EN_RXADDR    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x02
RF_CH        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x4c
RF_SETUP     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x03
CONFIG       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x0e
DYNPD/FEATURE    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x00 0x00
Data Rate    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1MBPS
Model        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; nRF24L01+
CRC Length   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 16 bits
PA Power     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; PA_LOW

 &lt;span class=&quot;k&quot;&gt;************&lt;/span&gt; Role Setup &lt;span class=&quot;k&quot;&gt;***********&lt;/span&gt;
 Choose a role: Enter 0 &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;pong_back, 1 &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;ping_out &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;CTRL+C to &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
 &amp;gt;1
 Role: Ping Out, starting transmission 

 Now sending...
 Got response 525939321, round-trip delay: 5
 Now sending...
 Got response 525940329, round-trip delay: 2
 Now sending...
 Got response 525941333, round-trip delay: 2
 Now sending...
 Got response 525942337, round-trip delay: 2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><category term="blog" /><category term="wireless" /><category term="sensor_node" /><category term="beaglebone" /><category term="nrf24l01" /><category term="linux" /><category term="electronics" /><summary type="html">I am working on various electronics projects where I want to have a sensor node that collects data from a sensor and either logs it to a micro-SD-card directly or sens it wirelessly to another machine that uses/logs/etc the data. I opted for a set of NRF24L01+ boards for the wireless communication between the nodes and data loggers. So to test it out I want to communicate between my Beagle Bone Black and an Arduino. The NRF24 library by TMRh20 supplies a unified API for the NRF24L01 that should work on Arduino, linux (like Beagle Bone Black and Raspberry Pi) and other platforms. It also includes some examples that are identical across platforms so you can test between platforms with the same code. Really cool. I had trouble getting it to work on my Beagle Bone Black. This post hopefully will help other getting it to work on a Beagle Bone Black running Debian Jessy.</summary></entry><entry><title type="html">Business intelligence and data manipulation with Knime</title><link href="http://allican.be/blog/2016/10/26/business-intelligence-with-knime.html" rel="alternate" type="text/html" title="Business intelligence and data manipulation with Knime" /><published>2016-10-26T00:00:00+08:00</published><updated>2016-10-26T17:58:19+08:00</updated><id>http://allican.be/blog/2016/10/26/business-intelligence-with-knime</id><content type="html" xml:base="http://allican.be/blog/2016/10/26/business-intelligence-with-knime.html">&lt;p&gt;It’s been a while since I did a proper post about something techy. But I did spend quite a bit of time with Knime, and I love it. So I think it warrants a post. &lt;a href=&quot;https://www.knime.org/knime-analytics-platform&quot;&gt;Knime&lt;/a&gt; is a complete data mining, manipulation and analysis toolkit. It’s completely open-source and really flexible. I have experience with other &lt;a href=&quot;https://en.wikipedia.org/wiki/Extract,_transform,_load&quot;&gt;ETL&lt;/a&gt; and reporting tools, like &lt;a href=&quot;https://www.talend.com/products/talend-open-studio&quot;&gt;Talend Open Studio&lt;/a&gt;, &lt;a href=&quot;http://community.jaspersoft.com/project/jaspersoft-studio&quot;&gt;JasperReports&lt;/a&gt; and &lt;a href=&quot;http://www.pentaho.com/product/data-integration&quot;&gt;Pentaho Kettle&lt;/a&gt; but for me (in my use-case) Knime rises above them. Talking about my use case, what is it?&lt;/p&gt;

&lt;h2 id=&quot;use-case&quot;&gt;Use Case&lt;/h2&gt;
&lt;p&gt;At &lt;a href=&quot;http://www.east-corp-philippines.com&quot;&gt;the solar power company&lt;/a&gt; that I am a partner in (among other activities) we sell inverters from various different brands. As a consequence, our clients use a variety of (web-based) monitoring tools. Each with their own dashboard and output. But we need overviews comparing all our clients with each-other, and besides that, we can get extra data from those inverters internally, which allows us to do advanced debugging and monitoring. But visualising that data from those different sources is non-trivial. This is where Knime comes in. We can download exports of the webbased monitoring dashboards that our clients use. Some of them produce csv files, others excel files, and the format of all those files is wildly different. Knime allows me to read in the data from those different files, combine it into one common dataset and then analyse that data. I used it for instance to create an interactive graph that plots the average daily solar array output per week for each of our clients (as a % of their maximum output) so I could compare the performance of each solar array.
Knime does it’s work this by creating a chain of “nodes” (operations) that are connected by arrows. Each node does somethings small, like calculate a number, filter rows, rename columns, etc. The data flows through the chain of operations from the start node to the end node.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;/images/knime_workflow.png&quot; alt=&quot;My knime workflow combining data from multiple sources into one workflow for analysis and visualisation.&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the nodes you can do calculations, filtering, joining data, grouping, pivot tables, transposing, etc. It also has graphing tools, and an enormous amount of plugins that let you go into seriously complex modelling, genetics, bioinformatics, geo-information, etc. It allows you to read a whole directory of files, databases, allows you to download data/files automatically from the internet or webservices and interface with online API’s like google analytics and twitter. Most of this stuff I haven’t tried out though.&lt;/p&gt;

&lt;p&gt;In the left of the image above you see a bunch of nodes with no input. Those are meta nodes. These allow you to embed whole separate workflow into another workflow. For each client for instance I have a workflow that reads the respective export files, combines them and transforms the data into data that is uniform across all clients. This way you can break complex workflows up into several separate ones. And if I ever need to read the data from one of those clients in another workflow, I just copy the meta-node over to the new workflow without having to redo any work.&lt;/p&gt;

&lt;h2 id=&quot;scripting&quot;&gt;Scripting&lt;/h2&gt;
&lt;p&gt;For me the cool part is that it also has a lot of scripting plugins for different languages. It integrates javascript, Groovy, Java, Python and R scripting interfaces at least. So you can create a small node that does something in python, or leverage the serious statistical power of R.
I for instance use the python scripting node to Date/Time manipulations and some other data corrections that I can quickly do in Python. But those nodes are really tiny and easy to maintain.&lt;/p&gt;

&lt;p&gt;A larger python node that I created is for visualisation. Knime has quite a few graphing tools, from &lt;a href=&quot;http://marcoghislanzoni.com/blog/2016/04/29/knime-3-charting-with-plotly-js/&quot;&gt;javascript based ones which can use some awesome graphing libraries for webapplications like Plotly.js&lt;/a&gt;, to it’s own internal graphing tool. But none of those were good enough for me. The performance of the javascript based ones was bad with large amounts of data (one of my workflows has a few 100.000 rows) while the internal one wasn’t interactive enough. I decided to go with Python’s &lt;a href=&quot;http://matplotlib.org/&quot;&gt;matplotlib&lt;/a&gt; which is used a lot in the scientific community as is really good. Especially the &lt;a href=&quot;http://matplotlib.org/users/pyplot_tutorial.html&quot;&gt;Pyplot graphs&lt;/a&gt;, which have an interactive interface are nice to use, enabling you to zoom in and out, switch data series on and off and save the resulting final graph as a png file.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;/images/knime-matplotlib-graph.png&quot; alt=&quot;The resulting graph of using matplotlib in a Knime Python View node&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The below code does the matplotlib work. The code is commented and together with the &lt;a href=&quot;http://matplotlib.org/users/pyplot_tutorial.html&quot;&gt;pyplot docs&lt;/a&gt; is quite understandable.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.gridspec&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gridspec&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mpl&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#set the matplotlib style, based on ggplot but slightly adjusted&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mystyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ggplot'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mystyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lines.linewidth'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.6&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mystyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#create a gridspec where the graph will take up 5/6 of the grid&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#and the legend the last bit&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gridspec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GridSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;% &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;of maximum output'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Time'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Average daily output (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;% &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;of max) per week&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Date'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# a-axis&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# variables for the y-axes (data series)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;line_cols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Date'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Week'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# use viridis for coloring the data series&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ax1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_color_cycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viridis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line_cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;#plot the data series&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#setup the legendto the right of the plot&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;leg1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'center left'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bbox_to_anchor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ncol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Now some magic to allow clicking in the legend to switch data series on and off&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lined&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;legline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origline&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leg1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;legline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origline&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onpick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# on the pick event, find the orig line corresponding to the&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# legend proxy line, and toggle the visibility&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;legline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artist&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;origline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;origline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Change the alpha on the line in the legend so we can see what lines&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# have been toggled&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;legline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;legline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#rescale the y-axis according to the currently active data series&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
    &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mpl_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'pick_event'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onpick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;output_image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Knime is really an end-to-end tool for people who need to work with homogenous data and load, transform and correct them before visualising and analysing the data. Although there is a bit of a learning curve to use Knime, it’s quite user friendly and anyone (without programming experience) will be able to learn to use it. The additional Python and R scripting possibilities and host of plugins take it beyond a simple ETL tool to a proper business intelligence and data analysis suite.&lt;/p&gt;</content><category term="blog" /><category term="business_intelligence" /><category term="knime" /><category term="python" /><category term="matplotlib" /><category term="visualisation" /><category term="ETL" /><category term="data" /><summary type="html">It’s been a while since I did a proper post about something techy. But I did spend quite a bit of time with Knime, and I love it. So I think it warrants a post. Knime is a complete data mining, manipulation and analysis toolkit. It’s completely open-source and really flexible. I have experience with other ETL and reporting tools, like Talend Open Studio, JasperReports and Pentaho Kettle but for me (in my use-case) Knime rises above them. Talking about my use case, what is it?</summary></entry><entry><title type="html">Tragedy in the Amazon</title><link href="http://allican.be/blog/2016/09/13/tragedy-in-the-amazon.html" rel="alternate" type="text/html" title="Tragedy in the Amazon" /><published>2016-09-13T00:00:00+08:00</published><updated>2016-09-13T13:24:52+08:00</updated><id>http://allican.be/blog/2016/09/13/tragedy-in-the-amazon</id><content type="html" xml:base="http://allican.be/blog/2016/09/13/tragedy-in-the-amazon.html">&lt;p&gt;&lt;a href=&quot;https://www.change.org/p/president-of-bolivia-evo-morales-let-s-protect-the-madidi-national-park-and-amazon-forest?recruiter=596205683&quot;&gt;&lt;img src=&quot;/images/beni_dam_banner.jpg&quot; alt=&quot;Help save Madidi and Pilón Lajas&quot; /&gt;&lt;/a&gt;
The Tambopata-Madidi area on the foothills of the Andes is one if the last areas of Amazonian forest that is relatively untouched by man. It contains 42000km2 of national parks, ranging from Tambopata in Peru to Madidi and Pilón Lajas in Bolivia. It is home to two important tributaries of the Amazon river and an incredible biodiversity with both montane and lowland tropical forest, harbouring over 10% of the world’s bird species, and possibly the most biodiverse place in the world. Around 15000-30000 people divided among three different indigenous peoples call it their home, with an interesting cultural diversity, bridging the Highland people for which Peru and Bolivia are famous to the lowland Amazonian tribes.&lt;/p&gt;

&lt;p&gt;As a gateway to this biological and cultural diversity, Rurrenabaque in Bolivia has attracted many visitors from all over the world for many years and has been a thriving eco-tourism destination with around 30000 tourists visiting the area in 2005 alone.
Now, all this is threatened in the name of “progress”. A badly planned bridge over the Rio Beni followed by a large road through the park and other short-sighted economical developments have already had a negative impact on the tourism in the area, but now president Evo Morales is planing to build two hydroelectric dams in the river Beni, two giant artificial lakes which will inundate around 2000km2, including substantial parts of the Madidi and Pilón Lajas national parks. But besides inundating primary forest and killing an enormous diversity of flora and fauna, giant dams like this have much wider ranging ecological impacts. The dams, cutting off one of the muddiest tributaries to the Amazon, will also prevent nutrients and minerals to be transported downstream, not only causing large ecological impacts on the remaining forests in Brazil but also causing eutrophication of the lake with bad water quality, low biodiversity and a breeding ground for parasites as consequences. The dams further downstream in Brazil have also proven to Bolivia that these mega dams elevate the risk of flooding upstream caused by el niño/la niña and influence migratory behaviour of fish along the whole Amazon River. And of course such a massive deforestation will have an impact on both the local climate and will be another nail in the coffin of human induced climate change.&lt;/p&gt;

&lt;p&gt;Also from an economical standpoint these lakes are questionable. The electricity is generated purely to sell to Brazil. Their places with high demand are on the other side of Bolivia, incurring high transportation costs. And a market with only one buyer for your product allows the buyer to push the price down. This has happened before in Paraguay where Brazil buys electricity from a giant hydroelectric dam below cost price. The returns on investment are therefore very likely much worse than projected by the government. For this reason a number hydroelectric projects in neighbouring countries have been canceled.
And even when accepting the expected income, looking at the sheer size of the lake (which multiple examples have shown is usually grossly underestimated initially) in comparison with the projected income from the electricity, it is a bad use of the surface area. Besides there being viable smaller scale hydroelectric alternatives, many alternative low-cost and sustainable sources of income have already been realised and can be expanded upon. The thriving eco-tourism in the area and the examples of sustainable agriculture projects are just two examples. The lakes will irreversibly destroy the eco-tourism and agricultural activities. With Rurrenabaque being one of the two major tourism destinations in Bolivia, the economical consequences will be wide ranging and not only limited to Rurrenabaque.&lt;/p&gt;

&lt;p&gt;Another tragedy is the cultural impact. Multiple indigenous people (Tsimane, Mosetén and Tacana), some of which still live in isolation in their traditional culture by choice, will loose their territory, livelihood and homes. This is not only a tragedy but even illegal under Bolivian law, where indigenous tribes have a high level of autonomy over their territory. Due to the geology of the land, the indigenous people live in sparsely populated but relatively small areas. A relocation will force a complete people to live in exile and quickly loose their culture.&lt;/p&gt;

&lt;p&gt;These cultural, ecological and economical tragedies can and should be prevented. Foreigners can’t do much to convince the president of Bolivia, but I hope that with enough interest and attention abroad, enough Bolivian people will realise that this project is an all round bad idea and will listen to their countrymen and -women who are working hard and not without danger, to convince their politicians. If you want to help, &lt;a href=&quot;https://www.change.org/p/president-of-bolivia-evo-morales-let-s-protect-the-madidi-national-park-and-amazon-forest?recruiter=596205683&quot;&gt;please sign the petition&lt;/a&gt; and spread the word on Facebook or in any other way you can. A great group where many Bolivian people who want to stop the project are a member of &lt;a href=&quot;https://www.facebook.com/groups/280638448985438/&quot;&gt;can be found on Facebook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;https://bolivia.wcs.org/en-us/Landscapes/Madidi-Tambopata.aspx&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://drobisonbolivia.blogspot.com/2016/09/represas-en-el-bala-y-chepete-pura.html?spref=fb&amp;amp;m=1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;https://es.scribd.com/mobile/document/274405657/EL-BALA-LA-GRAN-DEVASTACION-EN-LA-AMAZONIA-BOLIVIANA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://porlatierra.org/novedades/post/127&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://www.lostiempos.com/tendencias/interesante/20160814/crisis-rurrenabaque-pesadilla-china&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://tur.sb-10.org/doc/6649/index.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://dice.missouri.edu/docs/south-america-other/Tacana.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://dice.missouri.edu/docs/south-america-other/Tacana_2.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;http://dice.missouri.edu/docs/south-america-other/Tsimane.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="blog" /><category term="Amazon" /><category term="Bolivia" /><category term="Conservation" /><category term="deforestation" /><category term="hydroelectric" /><category term="dam" /><summary type="html">The Tambopata-Madidi area on the foothills of the Andes is one if the last areas of Amazonian forest that is relatively untouched by man. It contains 42000km2 of national parks, ranging from Tambopata in Peru to Madidi and Pilón Lajas in Bolivia. It is home to two important tributaries of the Amazon river and an incredible biodiversity with both montane and lowland tropical forest, harbouring over 10% of the world’s bird species, and possibly the most biodiverse place in the world. Around 15000-30000 people divided among three different indigenous peoples call it their home, with an interesting cultural diversity, bridging the Highland people for which Peru and Bolivia are famous to the lowland Amazonian tribes.</summary></entry><entry><title type="html">My Beagle Bone Black Logic-level analyser in  a web-application</title><link href="http://allican.be/project/2016/06/28/beaglebone_logic_level_analyser.html" rel="alternate" type="text/html" title="My Beagle Bone Black Logic-level analyser in  a web-application" /><published>2016-06-28T00:00:00+08:00</published><updated>2016-06-28T14:39:10+08:00</updated><id>http://allican.be/project/2016/06/28/beaglebone_logic_level_analyser</id><content type="html" xml:base="http://allican.be/project/2016/06/28/beaglebone_logic_level_analyser.html">&lt;p&gt;For my &lt;a href=&quot;/tag/aquaponics/&quot;&gt;aquaponics project&lt;/a&gt; I need to create a timed switch that turns my pump on and off. I am doing this with a simple 555 timer in a-stable mode, a capacitor, a relais and two pot-meters. The timer in a-stable mode switches a pin between high and low state, for a fixed amount of time. Both the high and the low times can be adjusted with the potentiometers.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;/images/555timer_bbb.jpg&quot; alt=&quot;My 555-timer connected to the Beaglebone Black&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/bbb_logiclevel_analyser.png&quot; alt=&quot;The Beaglebone Black logic-level analyser web-application&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To test if my calculations were right though, I need to monitor the output pin state. I did this already with a small LED, but since the timing is quite long (my pump should be on for 2 minutes and off for 10), I was quite annoyed having to sit looking at an LED for a while and I missed the switching between high and low multiple times. Especially in the beginning it is annoying because the initial startup is twice the “on” state, so even 20 minutes. A lot of time to waste, that I’d rather waste by developing a nice web-application that monitors the pin state in a graph.&lt;/p&gt;

&lt;p&gt;And so my logic-level analyser was born. I have a &lt;a href=&quot;//beagleboard.org/black&quot;&gt;Beagle Bone Black&lt;/a&gt; lying around which is perfect for this. It has many digital input/output pins, an Analog-Digital Converter (ADC) and PWM output among other things. I have a wifi card plugged into it as well, so as soon as I switch it on, it joins my wifi. It also contains a node.js server an runs the Cloud9 IDE which allows for easy programming of it, and with the bonescript library makes the many features available in javascript. So what better way to create a logic level analyser by just wiring the output pin of my 555 timer circuit (on a breadboard) to one of the GPIO pins of my beaglebone and plot the state of the pin in a graph in a web-interface.&lt;/p&gt;

&lt;p&gt;I wanted to do more with AngularJS anyway and creating dashboards with it, so searching for a nice plotting library wasn’t wasted time anyway. I really like &lt;a href=&quot;//www.angularjs.org&quot;&gt;AngularJS&lt;/a&gt; the more I play with it, especially it’s way to separate the (interface) logic from the html and it’s ability to dynamically change the data for a “controller” and have it update the interface. Perfect for me where I want to continuously poll the pin state of my beaglebone and update the graph. It can even gracefully handle a lost connection for instance with a wifi hick-up.
The &lt;a href=&quot;//krispo.github.io/angular-nvd3/&quot;&gt;angular-nvd3 libary&lt;/a&gt; is the library that I chose for the graphs. The underlying graphing library is D3, which is quite powerful, but it includes a much easier/quicker to use JSON-based API, and integrates very well with AngularJS.
You can find the code, which is quite self-explanatory &lt;a href=&quot;//github.com/dolfandringa/bbb_logiclevel_analyser&quot;&gt;on github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just to note some of the more interesting points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Beaglebone Black runs node-js which supports web-sockets. It also provides the bonescript Javascript library that can either be used by node-js or run in the browser. In the latter case it connects to the Beaglebone Black through a websocket using socket.io (which needs to be present on the beaglebone in /socket.io/socket.io.js). This is what the &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.setupBoneScript&lt;/code&gt; function takes care off. The call to &lt;code class=&quot;highlighter-rouge&quot;&gt;setTargetAddress&lt;/code&gt; in there is from the bonescript library. As soon as the websocket connection is established, it calls &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.refresh&lt;/code&gt;, which polls the pin and updates the graph and starts a timeout to repeat itself continuously.&lt;/li&gt;
  &lt;li&gt;The configuration of the graph is done with the &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.options&lt;/code&gt; object which contains the configuration parameters for the graph.&lt;/li&gt;
  &lt;li&gt;The graph’s y-axis contains only the values on and off. Bonescript returns 1 and 0 for the pin state though. But the NVD3 graph allows you to change the values displayed on the y-Axis with the &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.options.chart.yAxis.tickFormat&lt;/code&gt; function. This just gets the y-axis value and should return the value that you want displayed on the y-axis.&lt;/li&gt;
  &lt;li&gt;With ```$scope.options.chart.yDomain: [0,1]`` I forced the y-Axis to only contain values from 0 (off) to 1 (on). Else it would also include -1 on the y-axis.&lt;/li&gt;
  &lt;li&gt;with &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.options.chart.yAxis.tickValues: [0,1]&lt;/code&gt; I made sure that there are only y-axis ticks for the values 0 (off) and 1 (on), and none in between.&lt;/li&gt;
&lt;/ul&gt;</content><category term="project" /><category term="electronics" /><category term="aquaponics" /><category term="web-application" /><category term="beaglebone" /><category term="angularjs" /><category term="d3" /><category term="development" /><summary type="html">For my aquaponics project I need to create a timed switch that turns my pump on and off. I am doing this with a simple 555 timer in a-stable mode, a capacitor, a relais and two pot-meters. The timer in a-stable mode switches a pin between high and low state, for a fixed amount of time. Both the high and the low times can be adjusted with the potentiometers.</summary></entry><entry><title type="html">Reinstalling the kernel on Arch Linux after a failed upgrade.</title><link href="http://allican.be/blog/2016/06/09/arch-reinstalling-kernel-after-failed-upgrade.html" rel="alternate" type="text/html" title="Reinstalling the kernel on Arch Linux after a failed upgrade." /><published>2016-06-09T00:00:00+08:00</published><updated>2016-06-09T11:47:11+08:00</updated><id>http://allican.be/blog/2016/06/09/arch-reinstalling-kernel-after-failed-upgrade</id><content type="html" xml:base="http://allican.be/blog/2016/06/09/arch-reinstalling-kernel-after-failed-upgrade.html">&lt;p&gt;Since a few weeks my laptop battery is dead. I am still trying to work with Asus to get a new one as it is still under warranty (but sending it in for repair will apparently take 2 months while I already know that a new battery will solve the problem). So I am working of the net power only. The power sockets in the Philippines aren’t great though, and Asus decided to integrate the plug into the transformer/regulator unit for my laptop charger, creating a big heavy plug that is really too heavy for vertical wall sockets. So as you can guess from the title of this blog post, yesterday I was working on my laptop and decided to install upgrades on my Arch Linux box. While I was doing this though, I accidentally touched the power cord of my laptop, which then fell out of the wall socket. This isn’t the first time this happened, but unfortunately my computer was in the middle of a kernel upgrade…. And of course the kernel modules weren’t fully installed, and the initramfs wasn’t fully updated either.&lt;/p&gt;

&lt;p&gt;So when I started my laptop again, it dropped me into the emergency mode. After looking at the logs with &lt;code class=&quot;highlighter-rouge&quot;&gt;journalctl -xe&lt;/code&gt; and going almost all the way to the top of the logs, I found these error messages:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;systemd[1]: Starting Load Kernel Modules...
systemd[1]: systemd-modules-load.service: Main process exited, &lt;span class=&quot;nv&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;exited, &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
systemd[1]: Failed to start Load Kernel Modules.
systemd[1]: systemd-modules-load.service: Unit entered failed state.
systemd[1]: systemd-modules-load.service: Failed with result &lt;span class=&quot;s1&quot;&gt;'exit-code'&lt;/span&gt;.
systemd-modules-load[173]: Failed to lookup &lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'loop'&lt;/span&gt;: Function not implemented
systemd-modules-load[173]: Failed to lookup &lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vboxdrv'&lt;/span&gt;: Function not implemented
systemd-modules-load[173]: Failed to lookup &lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vboxpci'&lt;/span&gt;: Function not implemented
systemd-modules-load[173]: Failed to lookup &lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vboxnetadp'&lt;/span&gt;: Function not implemented
systemd-modules-load[173]: Failed to lookup &lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vboxnetflt'&lt;/span&gt;: Function not implemented&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And a little further down:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;systemd[1]: Mounting /boot/efi...
mount[336]: mount: unknown filesystem &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vfat'&lt;/span&gt;
systemd[1]: boot-efi.mount: Mount process exited, &lt;span class=&quot;nv&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;exited &lt;span class=&quot;nv&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;32
systemd[1]: Failed to mount /boot/efi.
systemd[1]: Dependency failed &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Local File Systems.
systemd[1]: &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;-fs.target: Job &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;-fs.target/start failed with result &lt;span class=&quot;s1&quot;&gt;'dependency'&lt;/span&gt;.
systemd[1]: &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt;-fs.target: Triggering &lt;span class=&quot;nv&quot;&gt;OnFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; dependencies.
systemd[1]: boot-efi.mount: Unit entered failed state.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So there was clearly something wrong with my kernel modules, causing them not to load. Fortunately I still had my &lt;a href=&quot;/blog/2016/02/04/creating_custom_persistent_arch_live_iso.html&quot;&gt;custom persistent arch iso live USB stick&lt;/a&gt;. With this, the solution was quite easy:&lt;/p&gt;

&lt;p&gt;I booted my laptop from the usb stick. Once in the live cd, I &lt;a href=&quot;https://wiki.archlinux.org/index.php/netctl#Wireless_.28WPA-PSK.29&quot;&gt;setup the network with netctl&lt;/a&gt;. Once I had network, I mounted my the partition with my OS’s root filesystem with &lt;code class=&quot;highlighter-rouge&quot;&gt;mount /dev/sda8 /mnt&lt;/code&gt; and chrooted into it with &lt;code class=&quot;highlighter-rouge&quot;&gt;arch-chroot /mnt /bin/bash&lt;/code&gt;. Now I was back in my normal OS. All I had to do now was reinstall the kernel and modules. I did &lt;code class=&quot;highlighter-rouge&quot;&gt;pacman -S --force linux linux-headers mkinitcpio kmod&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;--force&lt;/code&gt; in there makes sure everything gets reinstalled even if files from the package already exist in the filesystem. With me this was necessary since the same kernel and modules were already partially installed. It also re-built the initramfs and installed it. After this was done and a reboot, my os was up and running again. Phew! Thank heavens for the live USB stick.&lt;/p&gt;

&lt;p&gt;The last thing I needed to do is check which other packages might need to be reinstalled. If you have yaourt installed, you can show your installed packages, sorted by installation date with &lt;code class=&quot;highlighter-rouge&quot;&gt;yaourt -Q --date&lt;/code&gt;. The packages at the bottom are the ones that were installed last. I just guessed from there which were the packages that might be corrupt, and reinstalled them the same way as the linux/linux-headers/etc pacakges. I also got an error when installing them about nvidia modules (I am running bumblebee and bbswitch was one of the likely incompletely installed packages) and therefore decided to reinstal all those packages (nvidia, nvidia-utils, bumblebee, opencl-nvidia, lib32-nvidia-utils, bbswitch) as well. After this all errors were gone.&lt;/p&gt;</content><category term="blog" /><category term="ArchLinux" /><category term="live" /><category term="kernel" /><category term="upgrade" /><category term="modules" /><summary type="html">Since a few weeks my laptop battery is dead. I am still trying to work with Asus to get a new one as it is still under warranty (but sending it in for repair will apparently take 2 months while I already know that a new battery will solve the problem). So I am working of the net power only. The power sockets in the Philippines aren’t great though, and Asus decided to integrate the plug into the transformer/regulator unit for my laptop charger, creating a big heavy plug that is really too heavy for vertical wall sockets. So as you can guess from the title of this blog post, yesterday I was working on my laptop and decided to install upgrades on my Arch Linux box. While I was doing this though, I accidentally touched the power cord of my laptop, which then fell out of the wall socket. This isn’t the first time this happened, but unfortunately my computer was in the middle of a kernel upgrade…. And of course the kernel modules weren’t fully installed, and the initramfs wasn’t fully updated either.</summary></entry><entry><title type="html">Setting up a chinese IP camera without manual</title><link href="http://allican.be/blog/2016/05/13/finding-chinese-ip-cam.html" rel="alternate" type="text/html" title="Setting up a chinese IP camera without manual" /><published>2016-05-13T00:00:00+08:00</published><updated>2016-05-13T21:21:11+08:00</updated><id>http://allican.be/blog/2016/05/13/finding-chinese-ip-cam</id><content type="html" xml:base="http://allican.be/blog/2016/05/13/finding-chinese-ip-cam.html">&lt;p&gt;This post is probably a no-brainer for quite a lot of people. And it should have been for me too. I don’t know if my brain was just not working from the dry and hot el niño weather, but it took me quite a while to figure this out. Since chances are there are others with the same problem, I thought it’d be worth to write it up.&lt;/p&gt;

&lt;p&gt;My boss bought a few IP-camera’s on Ali-Express together with a recorder to monitor some areas with expensive equipment. I won’t go into &lt;a href=&quot;https://www.youtube.com/watch?v=B8DjTcANBx0&quot;&gt;the security of these types of camera’s&lt;/a&gt; here. And of course the cheap stuff from Ali-Express comes in an unmarked box without any manuals. There’s also no brand to be found on the camera. Normally it is a matter of pride to not need manuals. But the problem with IP camera’s is that you need to know their network settings somehow. That is where I ran into trouble.&lt;/p&gt;

&lt;p&gt;The camera’s have both a wired and wireless connection available. I was hoping the camera would be set to dynamic IP, so it would pickup an IP address from the DHCP server on my router, and I could see it in the router status page when I connected it with a wire. No such luck though. The next thing I tried was setup a DHCP server on my laptop. It’s pretty straightforward to install dnsmasq, and the only settings you need to adjust are the interfaces directive (make sure it’s not running on your wifi interface and mess up the wifi) and DHCP-range directive. And you need to set a static IP in the same sub-net for your wired network card. I’m not going into the details for this, but suffice it to say this didn’t work either. So clearly the IP-camera wasn’t set for a dynamic IP. I tried a few of the simple IP addresses like 192.168.0.2 192.168.1.2, etc but none worked. I was ready to give up what my brain finally kicked into gear: &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;wireshark&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have used wireshark plenty of times before to analyse network traffic. It is an awesome tool. It allows you to see all network traffic passing through your network interfaces. I did see the light on the wired network interface of the camera blinking, so I knew it was trying to communicate through the network. So I connected the camera with a cable straight into the network card of my laptop. I ran wireshark on that network interface and looked at the traffic coming by. Very quickly I noticed &lt;a href=&quot;https://en.wikipedia.org/wiki/Address_Resolution_Protocol&quot;&gt;ARP-packets&lt;/a&gt; where an IP-address 192.168.1.136 was &lt;a href=&quot;https://ask.wireshark.org/questions/5412/what-does-arp-42-who-has-19216811-tell-192168133-mean&quot;&gt;asking who has&lt;/a&gt; 192.168.1.1. This means that there is a device with IP-address 192.168.1.136 who is looking to contact IP-address 192.168.1.1. Chances are that this is the camera looking for a router to contact the internet. Indeed the camera’s turned out to be configured with NTP enabled to sync it’s hardware clock with a server on the internet, and it was trying to get on the internet. 
So now I knew the IP-address of the camera was 192.168.1.136. From that point onward it was straightforward again. Just set a static IP (192.168.1.2) on my laptop wired network interface, have a cable between the camera and the laptop, and I could access the web-interface of the camera on http://192.168.1.136.&lt;/p&gt;

&lt;p&gt;Configuring could finally commence. It took me way to long to realize to get wireshark. It was pretty easy once I remembered.&lt;/p&gt;</content><category term="blog" /><category term="networking" /><category term="wireshark" /><category term="IP-camera" /><category term="IP-address" /><summary type="html">This post is probably a no-brainer for quite a lot of people. And it should have been for me too. I don’t know if my brain was just not working from the dry and hot el niño weather, but it took me quite a while to figure this out. Since chances are there are others with the same problem, I thought it’d be worth to write it up.</summary></entry><entry><title type="html">Gorgeous earth art</title><link href="http://allican.be/blog/2016/04/29/gorgeous-earth.html" rel="alternate" type="text/html" title="Gorgeous earth art" /><published>2016-04-29T00:00:00+08:00</published><updated>2016-05-02T14:56:16+08:00</updated><id>http://allican.be/blog/2016/04/29/gorgeous-earth</id><content type="html" xml:base="http://allican.be/blog/2016/04/29/gorgeous-earth.html">&lt;p&gt;The USGS isn’t just a scientific organisation doing a lot of satellite imagery and remote sensing work. They show themselves to be artists as well. These images are absolutely gorgeous. Earth itself is gorgeous and there are many ways of looking at it. The way the USGS Landsat team are looking at it is definitely way out there. The way I use the same images to try to look underwater is a bit more mundane unfortunately.
These are just some of the images. You can &lt;a href=&quot;http://eros.usgs.gov/imagegallery/earth-art-4&quot;&gt;see more on the USGS website&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;/images/earthasart1.png&quot; alt=&quot;The sand dunes of the Sahara in the &amp;quot;Land of Terror,&amp;quot; Tanezrouft Basin in Algeria. Landsat 8/USGS/NASA&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/earthasart4.jpg&quot; alt=&quot;&amp;quot;This enhanced image of Western Australia resembles a mixture of crayons that melted in the sun. The yellow sand dunes of the Great Sandy Desert cover the upper right portion of the image. Red splotches indicate burned areas from grass and forest fires, and the colors in the rest of the image depict different types of surface geology.&amp;quot; - USGS&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/earthasart6.png&quot; alt=&quot;&amp;quot;Geometric shapes lie across the emptiness of the Sahara Desert in southern Egypt. Each point is a center pivot irrigation field a little less than 1 kilometer (0.6 miles) across. With no surface water in this region, wells pump underground water to rotating sprinklers from the huge Nubian Sandstone aquifer, which lies underneath the desert.&amp;quot; - USGS&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/earthasart22.jpg&quot; alt=&quot;&amp;quot;The ice surrounding the northern Canadian Spicer Islands, shown in bright red, resembles a cell, complete with ribosomes, mitochondria, and a nucleus. Even though the image was captured shortly after the first day of summer in the Northern Hemisphere, the islands are locked in ice.&amp;quot; - USGS&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/earthasart3.jpg&quot; alt=&quot;&amp;quot;A nearly perfect circle of forest delineates the boundary of Egmont National Park in New Zealand. Snow-capped Mount Taranaki marks the center of the park, which is surrounded by green farmland.&amp;quot; - USGS&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/earthasart5.jpg&quot; alt=&quot;&amp;quot;Slessor Glacier in Antarctica flows between the angular promontory Parry Point on the top left of the image and the Shackleton Range on the lower right. The purple highlights are exposed ice. Strong winds blow away the snow cover and expose lines that indicate the glacier flow direction. Rock outcrops next to the glacier also exhibit some of this bare ice.&amp;quot; - USGS&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="blog" /><category term="landsat" /><category term="USGS" /><category term="art" /><category term="remote-sensing" /><summary type="html">The USGS isn’t just a scientific organisation doing a lot of satellite imagery and remote sensing work. They show themselves to be artists as well. These images are absolutely gorgeous. Earth itself is gorgeous and there are many ways of looking at it. The way the USGS Landsat team are looking at it is definitely way out there. The way I use the same images to try to look underwater is a bit more mundane unfortunately.
These are just some of the images. You can see more on the USGS website.</summary></entry><entry><title type="html">Aquaponics Modeler: a modeling application for Aquaponics systems.</title><link href="http://allican.be/project/2016/04/24/AquaponicsModeler.html" rel="alternate" type="text/html" title="Aquaponics Modeler: a modeling application for Aquaponics systems." /><published>2016-04-24T00:00:00+08:00</published><updated>2016-06-28T15:10:11+08:00</updated><id>http://allican.be/project/2016/04/24/AquaponicsModeler</id><content type="html" xml:base="http://allican.be/project/2016/04/24/AquaponicsModeler.html">&lt;p&gt;Little by little I am working at my current job on an &lt;a href=&quot;http://www.theaquaponicsource.com/what-is-aquaponics/&quot;&gt;Aquaponics system&lt;/a&gt; together with the help of our volunteers.
As a final step to the first implementation I need to regulate the flow of water from our fish tank to the grow bed. I decided to do this with a timer that switches the pump on and off. In order to create the electronics for this timer, I need to know accurately how much water is flowing from one compartment into the next.
Of course I could just have done the maths for this on the back of a napkin, but I though writing an application that does the simulation would be much more fun.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;img src=&quot;/images/aquaponics_modeler_2.png&quot; alt=&quot;Aquaponics Modeler Screenshot&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/aquaponics_modeler_1.png&quot; alt=&quot;Aquaponics Modeler Screenshot&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And as it turns out, one thing leads to another, and before you know it you have a complete desktop application with &lt;a href=&quot;http://allican.be/AquaponicsModeler/&quot;&gt;proper documentation&lt;/a&gt; that can be used by anyone. It was fun to do and is helping me create our own aquaponics setup. I don’t know if it is of any use to anyone else, but for anyone interested, the documentation can be found &lt;a href=&quot;http://allican.be/AquaponicsModeler/&quot;&gt;on my website&lt;/a&gt; and the code on &lt;a href=&quot;http://www.github.com/dolfandringa/AquaponicsModeler/&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The application is written using the &lt;a href=&quot;http://doc.qt.io/qt-5/&quot;&gt;Qt application framework&lt;/a&gt;, making use of &lt;a href=&quot;https://www.riverbankcomputing.com/software/pyqt/intro&quot;&gt;PyQt5&lt;/a&gt;. The plots are being generated my the &lt;a href=&quot;http://matplotlib.org/users/pyplot_tutorial.html&quot;&gt;matplotlib.pyplot&lt;/a&gt; library. The documentation has been created using &lt;a href=&quot;http://www.sphinx-doc.org/&quot;&gt;Sphinx&lt;/a&gt; with the autodoc, apidoc and &lt;a href=&quot;http://sphinxcontrib-napoleon.readthedocs.org/en/latest/&quot;&gt;napoleon&lt;/a&gt; extensions. This allows me to write the documentation in docstrings using the Google syntax and generate the corresponding html files automatically. Codeanchaos wrote &lt;a href=&quot;https://codeandchaos.wordpress.com/2012/07/30/sphinx-autodoc-tutorial-for-dummies/&quot;&gt;a great howto on sphinx, apidoc and autodoc&lt;/a&gt;.&lt;/p&gt;</content><category term="project" /><category term="python" /><category term="qt" /><category term="desktop-application" /><category term="aquaponics" /><category term="modeling" /><category term="documentation" /><category term="sphinx" /><summary type="html">Little by little I am working at my current job on an Aquaponics system together with the help of our volunteers.
As a final step to the first implementation I need to regulate the flow of water from our fish tank to the grow bed. I decided to do this with a timer that switches the pump on and off. In order to create the electronics for this timer, I need to know accurately how much water is flowing from one compartment into the next.
Of course I could just have done the maths for this on the back of a napkin, but I though writing an application that does the simulation would be much more fun.</summary></entry></feed>
